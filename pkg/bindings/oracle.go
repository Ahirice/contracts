// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"newController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_labels\",\"type\":\"bytes32[]\"},{\"name\":\"_decimals\",\"type\":\"uint8[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"TokenAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"TokenOmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"TokenRateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"OraclizeQuerySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"OraclizeQueryFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerificationSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"DateVerificationFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"ResultHashVerificationFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"SignatureVerificationFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"NewController\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = ``

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _controller common.Address) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _controller)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCaller) Convert(opts *bind.CallOpts, _token common.Address, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "convert", _token, _amount)
	return *ret0, err
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCallerSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCaller) Tokens(opts *bind.CallOpts, arg0 common.Address) (struct {
	Label      string
	Decimals   uint8
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	ret := new(struct {
		Label      string
		Decimals   uint8
		Rate       *big.Int
		LastUpdate *big.Int
		Exists     bool
	})
	out := ret
	err := _Oracle.contract.Call(opts, out, "tokens", arg0)
	return *ret, err
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleSession) Tokens(arg0 common.Address) (struct {
	Label      string
	Decimals   uint8
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCallerSession) Tokens(arg0 common.Address) (struct {
	Label      string
	Decimals   uint8
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// AddTokens is a paid mutator transaction binding the contract method 0xf48d0e3b.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _decimals uint8[]) returns()
func (_Oracle *OracleTransactor) AddTokens(opts *bind.TransactOpts, _tokens []common.Address, _labels [][32]byte, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "addTokens", _tokens, _labels, _decimals)
}

// AddTokens is a paid mutator transaction binding the contract method 0xf48d0e3b.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _decimals uint8[]) returns()
func (_Oracle *OracleSession) AddTokens(_tokens []common.Address, _labels [][32]byte, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _labels, _decimals)
}

// AddTokens is a paid mutator transaction binding the contract method 0xf48d0e3b.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _decimals uint8[]) returns()
func (_Oracle *OracleTransactorSession) AddTokens(_tokens []common.Address, _labels [][32]byte, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _labels, _decimals)
}

// NewController is a paid mutator transaction binding the contract method 0xca57cb78.
//
// Solidity: function newController(_controller address) returns()
func (_Oracle *OracleTransactor) NewController(opts *bind.TransactOpts, _controller common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "newController", _controller)
}

// NewController is a paid mutator transaction binding the contract method 0xca57cb78.
//
// Solidity: function newController(_controller address) returns()
func (_Oracle *OracleSession) NewController(_controller common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.NewController(&_Oracle.TransactOpts, _controller)
}

// NewController is a paid mutator transaction binding the contract method 0xca57cb78.
//
// Solidity: function newController(_controller address) returns()
func (_Oracle *OracleTransactorSession) NewController(_controller common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.NewController(&_Oracle.TransactOpts, _controller)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactor) RemoveTokens(opts *bind.TransactOpts, _tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "removeTokens", _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactorSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleTransactor) UpdateTokenRate(opts *bind.TransactOpts, _token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRate", _token, _rate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleSession) UpdateTokenRate(_token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRate(_token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates")
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// OracleConversionIterator is returned from FilterConversion and is used to iterate over the raw logs and unpacked data for Conversion events raised by the Oracle contract.
type OracleConversionIterator struct {
	Event *OracleConversion // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleConversionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleConversion)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleConversion)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleConversionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleConversionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleConversion represents a Conversion event raised by the Oracle contract.
type OracleConversion struct {
	Token  common.Address
	Amount *big.Int
	Ether  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConversion is a free log retrieval operation binding the contract event 0x7f5d2abcc7049d493ba3d899d9c652fd8d27e9aaf5ecf58408d04567931d4e72.
//
// Solidity: e Conversion(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) FilterConversion(opts *bind.FilterOpts) (*OracleConversionIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Conversion")
	if err != nil {
		return nil, err
	}
	return &OracleConversionIterator{contract: _Oracle.contract, event: "Conversion", logs: logs, sub: sub}, nil
}

// WatchConversion is a free log subscription operation binding the contract event 0x7f5d2abcc7049d493ba3d899d9c652fd8d27e9aaf5ecf58408d04567931d4e72.
//
// Solidity: e Conversion(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) WatchConversion(opts *bind.WatchOpts, sink chan<- *OracleConversion) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Conversion")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleConversion)
				if err := _Oracle.contract.UnpackLog(event, "Conversion", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleDateVerificationFailureIterator is returned from FilterDateVerificationFailure and is used to iterate over the raw logs and unpacked data for DateVerificationFailure events raised by the Oracle contract.
type OracleDateVerificationFailureIterator struct {
	Event *OracleDateVerificationFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleDateVerificationFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleDateVerificationFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleDateVerificationFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleDateVerificationFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleDateVerificationFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleDateVerificationFailure represents a DateVerificationFailure event raised by the Oracle contract.
type OracleDateVerificationFailure struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDateVerificationFailure is a free log retrieval operation binding the contract event 0xb2b0a3beb7020693885edcf7c035327985b3ef7af05d93eb5685e05097b13aa8.
//
// Solidity: e DateVerificationFailure(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterDateVerificationFailure(opts *bind.FilterOpts) (*OracleDateVerificationFailureIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "DateVerificationFailure")
	if err != nil {
		return nil, err
	}
	return &OracleDateVerificationFailureIterator{contract: _Oracle.contract, event: "DateVerificationFailure", logs: logs, sub: sub}, nil
}

// WatchDateVerificationFailure is a free log subscription operation binding the contract event 0xb2b0a3beb7020693885edcf7c035327985b3ef7af05d93eb5685e05097b13aa8.
//
// Solidity: e DateVerificationFailure(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchDateVerificationFailure(opts *bind.WatchOpts, sink chan<- *OracleDateVerificationFailure) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "DateVerificationFailure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleDateVerificationFailure)
				if err := _Oracle.contract.UnpackLog(event, "DateVerificationFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleNewControllerIterator is returned from FilterNewController and is used to iterate over the raw logs and unpacked data for NewController events raised by the Oracle contract.
type OracleNewControllerIterator struct {
	Event *OracleNewController // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleNewControllerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleNewController)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleNewController)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleNewControllerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleNewControllerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleNewController represents a NewController event raised by the Oracle contract.
type OracleNewController struct {
	Old common.Address
	New common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNewController is a free log retrieval operation binding the contract event 0xf9b6a28700579d5c8fab50f0ac2dcaa52109b85c369c4f511fcc873330ab6cbb.
//
// Solidity: e NewController(_old address, _new address)
func (_Oracle *OracleFilterer) FilterNewController(opts *bind.FilterOpts) (*OracleNewControllerIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewController")
	if err != nil {
		return nil, err
	}
	return &OracleNewControllerIterator{contract: _Oracle.contract, event: "NewController", logs: logs, sub: sub}, nil
}

// WatchNewController is a free log subscription operation binding the contract event 0xf9b6a28700579d5c8fab50f0ac2dcaa52109b85c369c4f511fcc873330ab6cbb.
//
// Solidity: e NewController(_old address, _new address)
func (_Oracle *OracleFilterer) WatchNewController(opts *bind.WatchOpts, sink chan<- *OracleNewController) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewController")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleNewController)
				if err := _Oracle.contract.UnpackLog(event, "NewController", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleOraclizeQueryFailureIterator is returned from FilterOraclizeQueryFailure and is used to iterate over the raw logs and unpacked data for OraclizeQueryFailure events raised by the Oracle contract.
type OracleOraclizeQueryFailureIterator struct {
	Event *OracleOraclizeQueryFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleOraclizeQueryFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleOraclizeQueryFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleOraclizeQueryFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleOraclizeQueryFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleOraclizeQueryFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleOraclizeQueryFailure represents a OraclizeQueryFailure event raised by the Oracle contract.
type OracleOraclizeQueryFailure struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOraclizeQueryFailure is a free log retrieval operation binding the contract event 0xb444a460f686223e438b7125302f5f30448a8bed84f7f04a7033fcbca5d7c893.
//
// Solidity: e OraclizeQueryFailure(_reason string)
func (_Oracle *OracleFilterer) FilterOraclizeQueryFailure(opts *bind.FilterOpts) (*OracleOraclizeQueryFailureIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "OraclizeQueryFailure")
	if err != nil {
		return nil, err
	}
	return &OracleOraclizeQueryFailureIterator{contract: _Oracle.contract, event: "OraclizeQueryFailure", logs: logs, sub: sub}, nil
}

// WatchOraclizeQueryFailure is a free log subscription operation binding the contract event 0xb444a460f686223e438b7125302f5f30448a8bed84f7f04a7033fcbca5d7c893.
//
// Solidity: e OraclizeQueryFailure(_reason string)
func (_Oracle *OracleFilterer) WatchOraclizeQueryFailure(opts *bind.WatchOpts, sink chan<- *OracleOraclizeQueryFailure) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "OraclizeQueryFailure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleOraclizeQueryFailure)
				if err := _Oracle.contract.UnpackLog(event, "OraclizeQueryFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleOraclizeQuerySuccessIterator is returned from FilterOraclizeQuerySuccess and is used to iterate over the raw logs and unpacked data for OraclizeQuerySuccess events raised by the Oracle contract.
type OracleOraclizeQuerySuccessIterator struct {
	Event *OracleOraclizeQuerySuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleOraclizeQuerySuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleOraclizeQuerySuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleOraclizeQuerySuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleOraclizeQuerySuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleOraclizeQuerySuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleOraclizeQuerySuccess represents a OraclizeQuerySuccess event raised by the Oracle contract.
type OracleOraclizeQuerySuccess struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOraclizeQuerySuccess is a free log retrieval operation binding the contract event 0xedbc247c88b7b88672b3965dc594ac64e59c989abac512910944559dcc9867e2.
//
// Solidity: e OraclizeQuerySuccess(_label string)
func (_Oracle *OracleFilterer) FilterOraclizeQuerySuccess(opts *bind.FilterOpts) (*OracleOraclizeQuerySuccessIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "OraclizeQuerySuccess")
	if err != nil {
		return nil, err
	}
	return &OracleOraclizeQuerySuccessIterator{contract: _Oracle.contract, event: "OraclizeQuerySuccess", logs: logs, sub: sub}, nil
}

// WatchOraclizeQuerySuccess is a free log subscription operation binding the contract event 0xedbc247c88b7b88672b3965dc594ac64e59c989abac512910944559dcc9867e2.
//
// Solidity: e OraclizeQuerySuccess(_label string)
func (_Oracle *OracleFilterer) WatchOraclizeQuerySuccess(opts *bind.WatchOpts, sink chan<- *OracleOraclizeQuerySuccess) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "OraclizeQuerySuccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleOraclizeQuerySuccess)
				if err := _Oracle.contract.UnpackLog(event, "OraclizeQuerySuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleResultHashVerificationFailureIterator is returned from FilterResultHashVerificationFailure and is used to iterate over the raw logs and unpacked data for ResultHashVerificationFailure events raised by the Oracle contract.
type OracleResultHashVerificationFailureIterator struct {
	Event *OracleResultHashVerificationFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleResultHashVerificationFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleResultHashVerificationFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleResultHashVerificationFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleResultHashVerificationFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleResultHashVerificationFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleResultHashVerificationFailure represents a ResultHashVerificationFailure event raised by the Oracle contract.
type OracleResultHashVerificationFailure struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterResultHashVerificationFailure is a free log retrieval operation binding the contract event 0xf754fcf1871f5ca63ec99b813d3a788e3400617b77cb77de3ebde74a598afd9b.
//
// Solidity: e ResultHashVerificationFailure(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterResultHashVerificationFailure(opts *bind.FilterOpts) (*OracleResultHashVerificationFailureIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "ResultHashVerificationFailure")
	if err != nil {
		return nil, err
	}
	return &OracleResultHashVerificationFailureIterator{contract: _Oracle.contract, event: "ResultHashVerificationFailure", logs: logs, sub: sub}, nil
}

// WatchResultHashVerificationFailure is a free log subscription operation binding the contract event 0xf754fcf1871f5ca63ec99b813d3a788e3400617b77cb77de3ebde74a598afd9b.
//
// Solidity: e ResultHashVerificationFailure(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchResultHashVerificationFailure(opts *bind.WatchOpts, sink chan<- *OracleResultHashVerificationFailure) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "ResultHashVerificationFailure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleResultHashVerificationFailure)
				if err := _Oracle.contract.UnpackLog(event, "ResultHashVerificationFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSignatureVerificationFailureIterator is returned from FilterSignatureVerificationFailure and is used to iterate over the raw logs and unpacked data for SignatureVerificationFailure events raised by the Oracle contract.
type OracleSignatureVerificationFailureIterator struct {
	Event *OracleSignatureVerificationFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSignatureVerificationFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSignatureVerificationFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSignatureVerificationFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSignatureVerificationFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSignatureVerificationFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSignatureVerificationFailure represents a SignatureVerificationFailure event raised by the Oracle contract.
type OracleSignatureVerificationFailure struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSignatureVerificationFailure is a free log retrieval operation binding the contract event 0xebac6d12b4b2b204093afea6f6d1223690ab8fea6ba0efaeb6651522d16f92db.
//
// Solidity: e SignatureVerificationFailure(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterSignatureVerificationFailure(opts *bind.FilterOpts) (*OracleSignatureVerificationFailureIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SignatureVerificationFailure")
	if err != nil {
		return nil, err
	}
	return &OracleSignatureVerificationFailureIterator{contract: _Oracle.contract, event: "SignatureVerificationFailure", logs: logs, sub: sub}, nil
}

// WatchSignatureVerificationFailure is a free log subscription operation binding the contract event 0xebac6d12b4b2b204093afea6f6d1223690ab8fea6ba0efaeb6651522d16f92db.
//
// Solidity: e SignatureVerificationFailure(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchSignatureVerificationFailure(opts *bind.WatchOpts, sink chan<- *OracleSignatureVerificationFailure) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SignatureVerificationFailure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSignatureVerificationFailure)
				if err := _Oracle.contract.UnpackLog(event, "SignatureVerificationFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleTokenAdditionIterator is returned from FilterTokenAddition and is used to iterate over the raw logs and unpacked data for TokenAddition events raised by the Oracle contract.
type OracleTokenAdditionIterator struct {
	Event *OracleTokenAddition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleTokenAdditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleTokenAddition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleTokenAddition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleTokenAdditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleTokenAdditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleTokenAddition represents a TokenAddition event raised by the Oracle contract.
type OracleTokenAddition struct {
	Token    common.Address
	Label    string
	Decimals uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTokenAddition is a free log retrieval operation binding the contract event 0x882270a32de765388cf14c82c5a11b914579bcf9f08af917001199378bea0b77.
//
// Solidity: e TokenAddition(_token address, _label string, _decimals uint8)
func (_Oracle *OracleFilterer) FilterTokenAddition(opts *bind.FilterOpts) (*OracleTokenAdditionIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "TokenAddition")
	if err != nil {
		return nil, err
	}
	return &OracleTokenAdditionIterator{contract: _Oracle.contract, event: "TokenAddition", logs: logs, sub: sub}, nil
}

// WatchTokenAddition is a free log subscription operation binding the contract event 0x882270a32de765388cf14c82c5a11b914579bcf9f08af917001199378bea0b77.
//
// Solidity: e TokenAddition(_token address, _label string, _decimals uint8)
func (_Oracle *OracleFilterer) WatchTokenAddition(opts *bind.WatchOpts, sink chan<- *OracleTokenAddition) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "TokenAddition")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleTokenAddition)
				if err := _Oracle.contract.UnpackLog(event, "TokenAddition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleTokenOmissionIterator is returned from FilterTokenOmission and is used to iterate over the raw logs and unpacked data for TokenOmission events raised by the Oracle contract.
type OracleTokenOmissionIterator struct {
	Event *OracleTokenOmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleTokenOmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleTokenOmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleTokenOmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleTokenOmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleTokenOmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleTokenOmission represents a TokenOmission event raised by the Oracle contract.
type OracleTokenOmission struct {
	Token    common.Address
	Label    string
	Decimals uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTokenOmission is a free log retrieval operation binding the contract event 0xc08bd576b31b27a411529185f15928b1c1768875fa0aefd9e2f5f86c1145e1d4.
//
// Solidity: e TokenOmission(_token address, _label string, _decimals uint8)
func (_Oracle *OracleFilterer) FilterTokenOmission(opts *bind.FilterOpts) (*OracleTokenOmissionIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "TokenOmission")
	if err != nil {
		return nil, err
	}
	return &OracleTokenOmissionIterator{contract: _Oracle.contract, event: "TokenOmission", logs: logs, sub: sub}, nil
}

// WatchTokenOmission is a free log subscription operation binding the contract event 0xc08bd576b31b27a411529185f15928b1c1768875fa0aefd9e2f5f86c1145e1d4.
//
// Solidity: e TokenOmission(_token address, _label string, _decimals uint8)
func (_Oracle *OracleFilterer) WatchTokenOmission(opts *bind.WatchOpts, sink chan<- *OracleTokenOmission) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "TokenOmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleTokenOmission)
				if err := _Oracle.contract.UnpackLog(event, "TokenOmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleTokenRateUpdateIterator is returned from FilterTokenRateUpdate and is used to iterate over the raw logs and unpacked data for TokenRateUpdate events raised by the Oracle contract.
type OracleTokenRateUpdateIterator struct {
	Event *OracleTokenRateUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleTokenRateUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleTokenRateUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleTokenRateUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleTokenRateUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleTokenRateUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleTokenRateUpdate represents a TokenRateUpdate event raised by the Oracle contract.
type OracleTokenRateUpdate struct {
	Token common.Address
	Rate  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTokenRateUpdate is a free log retrieval operation binding the contract event 0x6d0466d743e24b9f0b2ae6bff53593c4b94c242fe76707f82de4076115d95a27.
//
// Solidity: e TokenRateUpdate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) FilterTokenRateUpdate(opts *bind.FilterOpts) (*OracleTokenRateUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "TokenRateUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleTokenRateUpdateIterator{contract: _Oracle.contract, event: "TokenRateUpdate", logs: logs, sub: sub}, nil
}

// WatchTokenRateUpdate is a free log subscription operation binding the contract event 0x6d0466d743e24b9f0b2ae6bff53593c4b94c242fe76707f82de4076115d95a27.
//
// Solidity: e TokenRateUpdate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) WatchTokenRateUpdate(opts *bind.WatchOpts, sink chan<- *OracleTokenRateUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "TokenRateUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleTokenRateUpdate)
				if err := _Oracle.contract.UnpackLog(event, "TokenRateUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleTokenRemovalIterator is returned from FilterTokenRemoval and is used to iterate over the raw logs and unpacked data for TokenRemoval events raised by the Oracle contract.
type OracleTokenRemovalIterator struct {
	Event *OracleTokenRemoval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleTokenRemovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleTokenRemoval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleTokenRemoval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleTokenRemovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleTokenRemovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleTokenRemoval represents a TokenRemoval event raised by the Oracle contract.
type OracleTokenRemoval struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoval is a free log retrieval operation binding the contract event 0xa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f24.
//
// Solidity: e TokenRemoval(_token address)
func (_Oracle *OracleFilterer) FilterTokenRemoval(opts *bind.FilterOpts) (*OracleTokenRemovalIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "TokenRemoval")
	if err != nil {
		return nil, err
	}
	return &OracleTokenRemovalIterator{contract: _Oracle.contract, event: "TokenRemoval", logs: logs, sub: sub}, nil
}

// WatchTokenRemoval is a free log subscription operation binding the contract event 0xa8126e187bf99b9fce567e2b20717579dc5a34b14b89437ca936562010549f24.
//
// Solidity: e TokenRemoval(_token address)
func (_Oracle *OracleFilterer) WatchTokenRemoval(opts *bind.WatchOpts, sink chan<- *OracleTokenRemoval) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "TokenRemoval")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleTokenRemoval)
				if err := _Oracle.contract.UnpackLog(event, "TokenRemoval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerificationSuccessIterator is returned from FilterVerificationSuccess and is used to iterate over the raw logs and unpacked data for VerificationSuccess events raised by the Oracle contract.
type OracleVerificationSuccessIterator struct {
	Event *OracleVerificationSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerificationSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerificationSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerificationSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerificationSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerificationSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerificationSuccess represents a VerificationSuccess event raised by the Oracle contract.
type OracleVerificationSuccess struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerificationSuccess is a free log retrieval operation binding the contract event 0xd101f34cc5e692caae7e6363e3c56220396ccf1d36f80b430c0b1db3bdf619cc.
//
// Solidity: e VerificationSuccess(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterVerificationSuccess(opts *bind.FilterOpts) (*OracleVerificationSuccessIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerificationSuccess")
	if err != nil {
		return nil, err
	}
	return &OracleVerificationSuccessIterator{contract: _Oracle.contract, event: "VerificationSuccess", logs: logs, sub: sub}, nil
}

// WatchVerificationSuccess is a free log subscription operation binding the contract event 0xd101f34cc5e692caae7e6363e3c56220396ccf1d36f80b430c0b1db3bdf619cc.
//
// Solidity: e VerificationSuccess(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchVerificationSuccess(opts *bind.WatchOpts, sink chan<- *OracleVerificationSuccess) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerificationSuccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerificationSuccess)
				if err := _Oracle.contract.UnpackLog(event, "VerificationSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
