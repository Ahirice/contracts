// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"updateTokenRatesList\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"parseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"},{\"name\":\"_tokenWhitelistName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b5060405160808062005da283398101604081815282516020808501518386015160609687015160018054600160a060020a03808616600160a060020a031992831617928390556000805490921692169190911790556007829055600881905596860185528486527fa0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a98379286019283527f10bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca958501959095529194919392620000da91600991620009bb565b5060028054600160a060020a031916600160a060020a0386161790556200010f6402540be4006401000000006200014d810204565b620001437ff0000000000000000000000000000000000000000000000000000000000000006401000000006200038f810204565b5050505062000a5d565b600254600160a060020a031615806200018357506002546200018190600160a060020a0316640100000000620005d6810204565b155b15620001a0576200019e6000640100000000620005da810204565b505b600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200020d57600080fd5b505af115801562000222573d6000803e3d6000fd5b505050506040513d60208110156200023957600080fd5b5051600354600160a060020a039081169116146200030c57600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620002be57600080fd5b505af1158015620002d3573d6000803e3d6000fd5b505050506040513d6020811015620002ea57600080fd5b505160038054600160a060020a031916600160a060020a039092169190911790555b600354604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200037357600080fd5b505af115801562000388573d6000803e3d6000fd5b5050505050565b600254600160a060020a03161580620003c55750600254620003c390600160a060020a0316640100000000620005d6810204565b155b15620003e257620003e06000640100000000620005da810204565b505b600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200044f57600080fd5b505af115801562000464573d6000803e3d6000fd5b505050506040513d60208110156200047b57600080fd5b5051600354600160a060020a039081169116146200054e57600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200050057600080fd5b505af115801562000515573d6000803e3d6000fd5b505050506040513d60208110156200052c57600080fd5b505160038054600160a060020a031916600160a060020a039092169190911790555b600354604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff00000000000000000000000000000000000000000000000000000000000000841660048201529051600160a060020a039092169163688dcfd79160248082019260009290919082900301818387803b1580156200037357600080fd5b3b90565b6000620005ef640100000000620005f5810204565b92915050565b60008062000620731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620005d6810204565b11156200069e5760028054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e657400000000000000000000000000000000000000000060208201526200069590640100000000620009a2810204565b5060016200099f565b6000620006c873c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620005d6810204565b11156200073d5760028054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526200069590640100000000620009a2810204565b60006200076773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620005d6810204565b1115620007dc5760028054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e000000000000000000000000000000000000000000000060208201526200069590640100000000620009a2810204565b60006200080673146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620005d6810204565b11156200087b5760028054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b65627900000000000000000000000000000000000000000060208201526200069590640100000000620009a2810204565b6000620008a5736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620005d6810204565b1115620008db575060028054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016200099f565b6000620009057320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620005d6810204565b11156200093b575060028054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016200099f565b6000620009657351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620005d6810204565b11156200099b575060028054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016200099f565b5060005b90565b8051620009b7906004906020840190620009bb565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009fe57805160ff191683800117855562000a2e565b8280016001018555821562000a2e579182015b8281111562000a2e57825182559160200191906001019062000a11565b5062000a3c92915062000a40565b5090565b6200099f91905b8082111562000a3c576000815560010162000a47565b6153358062000a6d6000396000f3006080604052600436106100ab5763ffffffff60e060020a60003504166327dc297e81146100b057806338bbfa50146101105780637d73b231146101ac578063877337b0146101dd578063937f54a414610204578063996cba681461021b5780639f6f99ee14610245578063a780b2f314610265578063b598f88214610333578063ca6ad1e41461033e578063cc20411914610356578063e2b4ce971461036b578063f3fef3a314610380575b600080fd5b3480156100bc57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261010e9583359536956044949193909101919081908401838280828437509497506103a49650505050505050565b005b34801561011c57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261010e95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506103c49650505050505050565b3480156101b857600080fd5b506101c16105fb565b60408051600160a060020a039092168252519081900360200190f35b3480156101e957600080fd5b506101f261060b565b60408051918252519081900360200190f35b61010e600480359060248035908101910135610611565b34801561022757600080fd5b5061010e600160a060020a036004358116906024351660443561069a565b34801561025157600080fd5b5061010e60048035602481019101356106f2565b34801561027157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102be9436949293602493928401919081908401838280828437509497506107aa9650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f85781810151838201526020016102e0565b50505050905090810190601f1680156103255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61010e600435610b28565b34801561034a57600080fd5b5061010e600435610b81565b34801561036257600080fd5b506102be610c15565b34801561037757600080fd5b506101f2610ca3565b34801561038c57600080fd5b5061010e600160a060020a0360043516602435610ca9565b6040805160008152602081019091526103c090839083906103c4565b5050565b60008060008060008060006103d7610d2c565b600160a060020a03163314610436576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b60008a8152600a6020526040902054600160a060020a031696508615156104a7576040805160e560020a62461bcd02815260206004820152601c60248201527f71756572794944206d61746368657320746f2061646472657373203000000000604482015290519081900360640190fd5b6104b087610f21565b995050985050505085151561050f576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b60098054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526105a7938d938d9383018282801561059c5780601f106105715761010080835404028352916020019161059c565b820191906000526020600020905b81548152906001019060200180831161057f57829003601f168201915b505050505088611044565b909450925083156105ef576105c36105be8a6107aa565b6116a1565b60008b8152600a602052604090208054600160a060020a031916905591508290506105ef8783836116b4565b50505050505050505050565b600154600160a060020a03165b90565b60085490565b61061a33611746565b151561065e576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206152aa833981519152604482015290519081900360640190fd5b61069583838380806020026020016040519081016040528093929190818152602001838360200280828437506117df945050505050565b505050565b6106a333611746565b15156106e7576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206152aa833981519152604482015290519081900360640190fd5b610695838383611b75565b6106fb33611746565b151561073f576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206152aa833981519152604482015290519081900360640190fd5b61074b6009838361514c565b506040805133808252602082018381529282018490527fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa9290918591859190606082018484808284376040519201829003965090945050505050a15050565b6060600060606107b86151ca565b846040516020018082805190602001908083835b602083106107eb5780518252601f1990920191602091820191016107cc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525192506008831180156108335750601c8311155b1515610889576040805160e560020a62461bcd02815260206004820152601260248201527f6d6973666f726d617474656420696e7075740000000000000000000000000000604482015290519081900360640190fd5b604080516007808252818301909252906020820160e08038833901905050915061091f856040516020018082805190602001908083835b602083106108df5780518252601f1990920191602091820191016108c0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260006007856000611d1b565b50604080517f7b22455448223a0000000000000000000000000000000000000000000000000081529051908190036007018120835190918491819060208401908083835b602083106109825780518252601f199092019160209182019101610963565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610a0a576040805160e560020a62461bcd02815260206004820152600f60248201527f707265666978206d69736d617463680000000000000000000000000000000000604482015290519081900360640190fd5b610a1385611d70565b9050610a63610a566040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611d70565b829063ffffffff611d9916565b5080600001519250610ab9610aac6040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250611d70565b829063ffffffff611db316565b508051600019840114610b16576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f74206a736f6e20666f726d61740000000000000000000000000000000000604482015290519081900360640190fd5b610b1f81611e1c565b95945050505050565b610b3133611746565b1515610b75576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206152aa833981519152604482015290519081900360640190fd5b610b7e81611e6f565b50565b610b8a33611746565b1515610bce576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206152aa833981519152604482015290519081900360640190fd5b610bd781612196565b604080513381526020810183905281517ffbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4929181900390910190a150565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c9b5780601f10610c7057610100808354040283529160200191610c9b565b820191906000526020600020905b815481529060010190602001808311610c7e57829003601f168201915b505050505081565b60075490565b610cb233611746565b1515610cf6576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206152aa833981519152604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610695573d6000803e3d6000fd5b600254600090600160a060020a03161580610d595750600254610d5790600160a060020a0316612385565b155b15610d6a57610d686000612389565b505b600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610dbd57600080fd5b505af1158015610dd1573d6000803e3d6000fd5b505050506040513d6020811015610de757600080fd5b5051600354600160a060020a03908116911614610e9d57600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e5157600080fd5b505af1158015610e65573d6000803e3d6000fd5b505050506040513d6020811015610e7b57600080fd5b505160038054600160a060020a031916600160a060020a039092169190911790555b600360009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b505050506040513d6020811015610f1a57600080fd5b5051905090565b60606000806000806000610f36600854612393565b600160a060020a0316631f69565f886040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610f9057600080fd5b505af1158015610fa4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260c0811015610fcd57600080fd5b810190808051640100000000811115610fe557600080fd5b82016020810184811115610ff857600080fd5b815164010000000081118282018710171561101257600080fd5b5050602082015160408301516060840151608085015160a090950151939e929d50909b50995091975095509350505050565b6000806060806060600080606060a58b511415156110ac576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c69642070726f6f66206c656e677468000000000000000000000000604482015290519081900360640190fd5b60418b60018151811015156110bd57fe5b016020015160f860020a9081900481020414611123576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b604080516041808252608082019092529060208201610820803883390190505095506111558b60026041896000611d1b565b8b519096506060908c90604490811061116a57fe5b90602001015160f860020a900460f860020a0260f860020a90046101008d604160020181518110151561119957fe5b016020015160f860020a90819004810204020114611201576040805160e560020a62461bcd02815260206004820152601660248201527f696e76616c69642068656164657273206c656e67746800000000000000000000604482015290519081900360640190fd5b604080516060808252608082019092529060208201610c00803883390190505094506112338b60456060886000611d1b565b945061124085878c61248a565b1515611296576040805160e560020a62461bcd02815260206004820152601160248201527f696e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b6040805160148082528183019092529060208201610280803883390190505093506112c785600b6014876000611d1b565b93506112d3848a6125a5565b909350915082151561132f576040805160e560020a62461bcd02815260206004820152600c60248201527f696e76616c696420646174650000000000000000000000000000000000000000604482015290519081900360640190fd5b60408051602c80825260608201909252906020820161058080388339019050509050611361856034602c846000611d1b565b905061136c816129e3565b6040518082805190602001908083835b6020831061139b5780518252601f19909201916020918201910161137c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660028d6040516020018082805190602001908083835b602083106114015780518252601f1990920191602091820191016113e2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106114645780518252601f199092019160209182019101611445565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156114a5573d6000803e3d6000fd5b5050506040513d60208110156114ba57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106115065780518252601f1990920191602091820191016114e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561158e576040805160e560020a62461bcd02815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156115f25781810151838201526020016115da565b50505050905090810190601f16801561161f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561165257818101518382015260200161163a565b50505050905090810190601f16801561167f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b60006116ae8260126133fb565b92915050565b6116bf600854612393565b600160a060020a031663d545782e8484846040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018381526020018281526020019350505050600060405180830381600087803b15801561172957600080fd5b505af115801561173d573d6000803e3d6000fd5b50505050505050565b6000611753600754612393565b600160a060020a031663b429afeb836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156117ad57600080fd5b505af11580156117c1573d6000803e3d6000fd5b505050506040513d60208110156117d757600080fd5b505192915050565b6117e76151ca565b6117ef6151ca565b6000606060006117fd6151ca565b600087516000141561185c576040805160208082526010908201527f656d70747920746f6b656e206c697374000000000000000000000000000000008183015290516000805160206152ca8339815191529181900360600190a1611b6a565b30600160a060020a031631885161189060408051908101604052806003815260200160ea60020a6215549302815250613fc6565b0211156118ea576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206152ca8339815191529181900360600190a1611b6a565b61194f606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d0000000000000000000000000000815250611d70565b965061198f6040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250611d70565b9550600094505b8751851015611b6a576119bf88868151811015156119b057fe5b90602001906020020151610f21565b5050955050509350821515611a1e576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b611a2784611d70565b604080518082019091526003815260ea60020a62155493026020820152909250611a7990611a7388611a67611a628c8863ffffffff6141fc16565b611d70565b9063ffffffff6141fc16565b8b614273565b90508785815181101515611a8957fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05611aeb83611e1c565b6040805160208082528351818301528351919283929083019185019080838360005b83811015611b25578181015183820152602001611b0d565b50505050905090810190601f168015611b525780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600190940193611996565b505050505050505050565b600160a060020a0382161515611bc157604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015611bbb573d6000803e3d6000fd5b50611ccc565b81600160a060020a031663a9059cbb84836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611c2457600080fd5b505af1158015611c38573d6000803e3d6000fd5b505050506040513d6020811015611c4e57600080fd5b50511515611ccc576040805160e560020a62461bcd02815260206004820152602560248201527f455243323020746f6b656e207472616e736665722077617320756e737563636560448201527f737366756c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60408051600160a060020a0380861682528416602082015280820183905290517ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839181900360600190a1505050565b60606000806000848701925082865110151515611d3757600080fd5b505060208087019084015b868860200101821015611d6357888201518682015260209182019101611d42565b5093979650505050505050565b611d786151ca565b50604080518082019091528151815260208281019082018190525b50919050565b611da16151ca565b611dac838383614676565b5092915050565b611dbb6151ca565b8151835160009182911015611dd257849250611e14565b50508151835160208086015190850151910191909103906001908214611e02575082516020840151819020908220145b8015611e1057835185510385525b8492505b505092915050565b606080600083600001516040519080825280601f01601f191660200182016040528015611e53578160200160208202803883390190505b509150602082019050611dac81856020015186600001516146e7565b6060611e796151ca565b611e816151ca565b60006060611e8d6151ca565b6000611e9761472b565b9650865160001415611ef6576040805160208082526009908201527f6e6f20746f6b656e7300000000000000000000000000000000000000000000008183015290516000805160206152ca8339815191529181900360600190a161218c565b30600160a060020a0316318751611f2a60408051908101604052806003815260200160ea60020a6215549302815250613fc6565b021115611f84576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206152ca8339815191529181900360600190a161218c565b611fe9606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d0000000000000000000000000000815250611d70565b95506120296040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250611d70565b9450600093505b865184101561218c5761204a87858151811015156119b057fe5b5050505050925061205a83611d70565b604080518082019091526003815260ea60020a6215549302602082015290925061209b9061209587611a67611a628b8863ffffffff6141fc16565b8a614273565b905086848151811015156120ab57fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c0561210d83611e1c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561214757818101518382015260200161212f565b50505050905090810190601f1680156121745780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600190930192612030565b5050505050505050565b600254600160a060020a031615806121c057506002546121be90600160a060020a0316612385565b155b156121d1576121cf6000612389565b505b600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561222457600080fd5b505af1158015612238573d6000803e3d6000fd5b505050506040513d602081101561224e57600080fd5b5051600354600160a060020a0390811691161461230457600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156122b857600080fd5b505af11580156122cc573d6000803e3d6000fd5b505050506040513d60208110156122e257600080fd5b505160038054600160a060020a031916600160a060020a039092169190911790555b600354604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b15801561236a57600080fd5b505af115801561237e573d6000803e3d6000fd5b5050505050565b3b90565b60006116ae614805565b60008054604080517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a0390921691630178b8bf9160248082019260209290919082900301818787803b1580156123fa57600080fd5b505af115801561240e573d6000803e3d6000fd5b505050506040513d602081101561242457600080fd5b5051604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b1580156117ad57600080fd5b60008060006125226002876040518082805190602001908083835b602083106124c45780518252601f1990920191602091820191016124a5565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015612505573d6000803e3d6000fd5b5050506040513d602081101561251a57600080fd5b505186614b2d565b9250905080801561259b5750836040518082805190602001908083835b6020831061255e5780518252601f19909201916020918201910161253f565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600160a060020a0390811690861614925050505b9695505050505050565b6000806125b06151ca565b6125b86151ca565b6125c06151ca565b60008060008060008060008d6040516020018082805190602001908083835b602083106125fe5780518252601f1990920191602091820191016125df565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405251601414151561263e57fe5b6126478e611d70565b99506126876040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611d70565b98506126c76040805190810160405280600181526020017f2000000000000000000000000000000000000000000000000000000000000000815250611d70565b97506126e96126e46126df8c8b63ffffffff611d9916565b611e1c565b614bb5565b96506000871180156126fb5750602087105b1515612751576040805160e560020a62461bcd02815260206004820152600960248201527f646179206572726f720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61276c6127676126df8c8b63ffffffff611d9916565b614bc2565b60ff1695506000861180156127815750600d86105b15156127d7576040805160e560020a62461bcd02815260206004820152600b60248201527f6d6f6e7468206572726f72000000000000000000000000000000000000000000604482015290519081900360640190fd5b6127ed6126e46126df8c8b63ffffffff611d9916565b94506107e1851180156128015750610bb885105b1515612857576040805160e560020a62461bcd02815260206004820152600a60248201527f79656172206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b61286d6126e46126df8c8c63ffffffff611d9916565b9350601984106128c7576040805160e560020a62461bcd02815260206004820152600a60248201527f686f7572206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b6128dd6126e46126df8c8c63ffffffff611d9916565b9250603c8310612937576040805160e560020a62461bcd02815260206004820152600c60248201527f6d696e757465206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b61294d6126e46126df8c8c63ffffffff611d9916565b9150603c82106129a7576040805160e560020a62461bcd02815260206004820152600c60248201527f7365636f6e64206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b506402540be40084026305f5e100860201620f4240870201612710840201606483020181018c81119b5099505050505050505050509250929050565b60606000806000806000606060008060008a519450846040519080825280601f01601f191660200182016040528015612a26578160200160208202803883390190505b509350600085118015612a3a575060048506155b1515612a90576040805160e560020a62461bcd02815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906001198801908110612ad457fe5b90602001015160f860020a900460f860020a026040516020018082600160f860020a031916600160f860020a03191681526001019150506040516020818303038152906040526040518082805190602001908083835b60208310612b495780518252601f199092019160209182019101612b2a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612b8b57600285039450612c82565b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906000198801908110612bcf57fe5b90602001015160f860020a900460f860020a026040516020018082600160f860020a031916600160f860020a03191681526001019150506040516020818303038152906040526040518082805190602001908083835b60208310612c445780518252601f199092019160209182019101612c25565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612c82576001850394505b505060048084040260005b81811015612fe4576040805160a081018252607b81526000602082015260008051602061528a833981519152918101919091526000805160206152ea833981519152606082015260008051602061526a83398151915260808201528b5160018301928d918110612cf957fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612d1f57fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061528a83398151915281526020016000805160206152ea833981519152815260200160008051602061526a8339815191528152508b82806001019350815181101515612d9c57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612dc257fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b81526020016000815260200160008051602061528a83398151915281526020016000805160206152ea833981519152815260200160008051602061526a8339815191528152508b82806001019350815181101515612e3f57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612e6557fe5b90602001015160f860020a900460f860020a02965060a060405190810160405280607b81526020016000815260200160008051602061528a83398151915281526020016000805160206152ea833981519152815260200160008051602061526a8339815191528152508b82806001019350815181101515612ee257fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612f0857fe5b0160200151845160f860020a9182900490910296506001840193600160f860020a03198b81166004026010828d16041716918691908110612f4557fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c16041716918691908110612f8a57fe5b906020010190600160f860020a031916908160001a90535083516001840193600160f860020a0319898116604002891716918691908110612fc757fe5b906020010190600160f860020a031916908160001a905350612c8d565b81850360021415613176576040805160a081018252607b81526000602082015260008051602061528a833981519152918101919091526000805160206152ea833981519152606082015260008051602061526a83398151915260808201528b5160018301928d91811061305357fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561307957fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061528a83398151915281526020016000805160206152ea833981519152815260200160008051602061526a8339815191528152508b828060010193508151811015156130f657fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561311c57fe5b0160200151845160f860020a9182900490910298506001840193600160f860020a03198b81166004026010828d1604171691869190811061315957fe5b906020010190600160f860020a031916908160001a9053506133ec565b818503600314156133ec576040805160a081018252607b81526000602082015260008051602061528a833981519152918101919091526000805160206152ea833981519152606082015260008051602061526a83398151915260808201528b5160018301928d9181106131e557fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561320b57fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061528a83398151915281526020016000805160206152ea833981519152815260200160008051602061526a8339815191528152508b8280600101935081518110151561328857fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156132ae57fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b81526020016000815260200160008051602061528a83398151915281526020016000805160206152ea833981519152815260200160008051602061526a8339815191528152508b8280600101935081518110151561332b57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561335157fe5b0160200151845160f860020a9182900490910297506001840193600160f860020a03198b81166004026010828d1604171691869190811061338e57fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c160417169186919081106133d357fe5b906020010190600160f860020a031916908160001a9053505b50508152979650505050505050565b60008281808080808080808080805b8b51811015613c77578b517f3000000000000000000000000000000000000000000000000000000000000000908d908390811061344357fe5b90602001015160f860020a900460f860020a02600160f860020a031916101580156134b957508b517f3900000000000000000000000000000000000000000000000000000000000000908d908390811061349957fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b80156134c3575083155b1561358d57841561352e576134df8a600a63ffffffff614ff516565b8c51909a50613521906030908e90849081106134f757fe5b90602001015160f860020a900460f860020a0260f860020a9004038b61502a90919063ffffffff16565b9950600190970196613588565b600195506135438b600a63ffffffff614ff516565b8c51909b50613585906030908e908490811061355b57fe5b90602001015160f860020a900460f860020a0260f860020a9004038c61502a90919063ffffffff16565b9a505b613c6f565b8b517f3000000000000000000000000000000000000000000000000000000000000000908d90839081106135bd57fe5b90602001015160f860020a900460f860020a02600160f860020a0319161015801561363357508b517f3900000000000000000000000000000000000000000000000000000000000000908d908390811061361357fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b801561363c5750835b1561369b5761365289600a63ffffffff614ff516565b8c51909950613694906030908e908490811061366a57fe5b90602001015160f860020a900460f860020a0260f860020a9004038a61502a90919063ffffffff16565b9850613c6f565b8b517f2e00000000000000000000000000000000000000000000000000000000000000908d90839081106136cb57fe5b90602001015160f860020a900460f860020a02600160f860020a03191614156137fa57851515613745576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b841561379b576040805160e560020a62461bcd02815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b83156137f1576040805160e560020a62461bcd02815260206004820152601660248201527f646563696d616c206166746572206578706f6e656e7400000000000000000000604482015290519081900360640190fd5b60019450613c6f565b8b517f2d00000000000000000000000000000000000000000000000000000000000000908d908390811061382a57fe5b90602001015160f860020a900460f860020a02600160f860020a031916141561395c5782156138a3576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202d000000000000000000000000000000000000000000604482015290519081900360640190fd5b81156138f9576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613953576040805160e560020a62461bcd02815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019250613c6f565b8b517f2b00000000000000000000000000000000000000000000000000000000000000908d908390811061398c57fe5b90602001015160f860020a900460f860020a02600160f860020a0319161415613abe578115613a05576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202b000000000000000000000000000000000000000000604482015290519081900360640190fd5b8215613a5b576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613ab5576040805160e560020a62461bcd02815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019150613c6f565b8b517f4500000000000000000000000000000000000000000000000000000000000000908d9083908110613aee57fe5b90602001015160f860020a900460f860020a02600160f860020a0319161480613b6157508b517f6500000000000000000000000000000000000000000000000000000000000000908d9083908110613b4257fe5b90602001015160f860020a900460f860020a02600160f860020a031916145b15613c1f57851515613bbd576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b8315613c13576040805160e560020a62461bcd02815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b60019350809650613c6f565b6040805160e560020a62461bcd02815260206004820152600d60248201527f696e76616c696420646967697400000000000000000000000000000000000000604482015290519081900360640190fd5b60010161340a565b8280613c805750815b15613c9957600287018111613c9457600080fd5b613cae565b8315613cae57600187018111613cae57600080fd5b8215613d3a578d8910613d3057604e8e8a0310613d15576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b8d8903600a0a8b811515613d2557fe5b049a508a9c50613fb4565b888e039d50613d4d565b613d4a8e8a63ffffffff61502a16565b9d505b878e10613e7357604e8810613dd2576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b613de68b600a8a900a63ffffffff614ff516565b9a50613df88b8b63ffffffff61502a16565b9a50604e888f0310613e54576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b613e6c888f03600a0a8c614ff590919063ffffffff16565b9a50613fb0565b968d900396604e8810613ef6576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b87600a0a8a811515613f0457fe5b049950604e8e10613f85576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b613f9b8e600a0a8c614ff590919063ffffffff16565b9a50613fad8b8b63ffffffff61502a16565b9a505b8a9c505b50505050505050505050505092915050565b600254600090600160a060020a03161580613ff35750600254613ff190600160a060020a0316612385565b155b15614004576140026000612389565b505b600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561405757600080fd5b505af115801561406b573d6000803e3d6000fd5b505050506040513d602081101561408157600080fd5b5051600354600160a060020a0390811691161461413757600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156140eb57600080fd5b505af11580156140ff573d6000803e3d6000fd5b505050506040513d602081101561411557600080fd5b505160038054600160a060020a031916600160a060020a039092169190911790555b6003546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b838110156141b0578181015183820152602001614198565b50505050905090810190601f1680156141dd5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156117ad57600080fd5b606080600083600001518560000151016040519080825280601f01601f191660200182016040528015614239578160200160208202803883390190505b50915060208201905061425581866020015187600001516146e7565b84516020850151855161426b92840191906146e7565b509392505050565b6002546000908190600160a060020a031615806142a257506002546142a090600160a060020a0316612385565b155b156142b3576142b16000612389565b505b600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561430657600080fd5b505af115801561431a573d6000803e3d6000fd5b505050506040513d602081101561433057600080fd5b5051600354600160a060020a039081169116146143e657600260009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561439a57600080fd5b505af11580156143ae573d6000803e3d6000fd5b505050506040513d60208110156143c457600080fd5b505160038054600160a060020a031916600160a060020a039092169190911790555b600354604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810186905260048101918252875160448201528751600160a060020a0390931692632ef3accc9289928892829160640190602086019080838360005b8381101561446657818101518382015260200161444e565b50505050905090810190601f1680156144935780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156144b357600080fd5b505af11580156144c7573d6000803e3d6000fd5b505050506040513d60208110156144dd57600080fd5b50519050670de0b6b3a76400003a8402018111156144fe576000915061426b565b6003546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b83811015614591578181015183820152602001614579565b50505050905090810190601f1680156145be5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156145f15781810151838201526020016145d9565b50505050905090810190601f16801561461e5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b15801561464057600080fd5b505af1158015614654573d6000803e3d6000fd5b50505050506040513d602081101561466b57600080fd5b505195945050505050565b61467e6151ca565b600061469c856000015186602001518660000151876020015161503c565b602080870180519186019190915280518203855286519051919250018114156146c857600085526146de565b8351835186519101900385528351810160208601525b50909392505050565b60005b6020821061470c578251845260209384019390920191601f19909101906146ea565b50905182516020929092036101000a6000190180199091169116179052565b6060614738600854612393565b600160a060020a031663e81239ac6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561477557600080fd5b505af1158015614789573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156147b257600080fd5b8101908080516401000000008111156147ca57600080fd5b820160208101848111156147dd57600080fd5b81518560208202830111640100000000821117156147fa57600080fd5b509094505050505090565b600080614825731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612385565b11156148965760028054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e6574000000000000000000000000000000000000000000602082015261488e906150fc565b506001610608565b60006148b573c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612385565b111561491e5760028054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e330000000000000000000000000000000000000000602082015261488e906150fc565b600061493d73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612385565b11156149a65760028054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e0000000000000000000000000000000000000000000000602082015261488e906150fc565b60006149c573146500cfd35b22e4a392fe0adc06de1a1368ed48612385565b1115614a2e5760028054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b656279000000000000000000000000000000000000000000602082015261488e906150fc565b6000614a4d736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612385565b1115614a81575060028054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001610608565b6000614aa07320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612385565b1115614ad4575060028054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001610608565b6000614af37351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612385565b1115614b27575060028054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001610608565b50600090565b600080600080600085516041141515614b4c5760009450849350614bab565b50505060208301516040840151606085015160001a601b60ff82161015614b7157601b015b8060ff16601b14158015614b8957508060ff16601c14155b15614b9a5760009450849350614bab565b614ba68782858561510f565b945094505b5050509250929050565b60006116ae8260006133fb565b600080826040516020018082805190602001908083835b60208310614bf85780518252601f199092019160209182019101614bd9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310614c5b5780518252601f199092019160209182019101614c3c565b5181516000196020949094036101000a93909301928316921916919091179052604080519390910183900383207f4a616e00000000000000000000000000000000000000000000000000000000008452905192839003600301909220919450508314159150614ccf90505760019150611d93565b604080517f466562000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614d115760029150611d93565b604080517f4d6172000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614d535760039150611d93565b604080517f417072000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614d955760049150611d93565b604080517f4d6179000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614dd75760059150611d93565b604080517f4a756e000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614e195760069150611d93565b604080517f4a756c000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614e5b5760079150611d93565b604080517f417567000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614e9d5760089150611d93565b604080517f536570000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614edf5760099150611d93565b604080517f4f6374000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614f2157600a9150611d93565b604080517f4e6f76000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614f6357600b9150611d93565b604080517f446563000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614fa557600c9150611d93565b6040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b6000808315156150085760009150611dac565b5082820282848281151561501857fe5b041461502357600080fd5b9392505050565b60008282018381101561502357600080fd5b600083818080808080808c8b116150e65760208b116150af5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b8285146150a757838810615094578c8c0198506150ec565b878060010198505085885116925061507c565b8798506150ec565b8a8a209150600096505b8a8d0387116150e65750898720818114156150d6578798506150ec565b60019788019796909601956150b9565b8c8c0198505b5050505050505050949350505050565b80516103c09060049060208401906151e1565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061518d5782800160ff198235161785556151ba565b828001600101855582156151ba579182015b828111156151ba57823582559160200191906001019061519f565b506151c692915061524f565b5090565b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061522257805160ff19168380011785556151ba565b828001600101855582156151ba579182015b828111156151ba578251825591602001919060010190615234565b61060891905b808211156151c657600081556001016152555600001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000073656e646572206973206e6f74206120636f6e74726f6c6c65720000000000004eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e00000102030405060708090a0b0c0d0e0f10111213141516171819000000003fa165627a7a72305820234f125b9b9a026b22f70d20e6d5ec7c36feb0001d621095be3ff5a7e2720b2c0029`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _ens common.Address, _controllerName [32]byte, _tokenWhitelistName [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _ens, _controllerName, _tokenWhitelistName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCallerSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleCaller) ParseRate(opts *bind.CallOpts, _json string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "parseRate", _json)
	return *ret0, err
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleSession) ParseRate(_json string) (string, error) {
	return _Oracle.Contract.ParseRate(&_Oracle.CallOpts, _json)
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleCallerSession) ParseRate(_json string) (string, error) {
	return _Oracle.Contract.ParseRate(&_Oracle.CallOpts, _json)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Claim(opts *bind.TransactOpts, _to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "claim", _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts, _gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates", _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactor) UpdateTokenRatesList(opts *bind.TransactOpts, _gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRatesList", _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Withdraw(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "withdraw", _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// OracleClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Oracle contract.
type OracleClaimedIterator struct {
	Event *OracleClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleClaimed represents a Claimed event raised by the Oracle contract.
type OracleClaimed struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) FilterClaimed(opts *bind.FilterOpts) (*OracleClaimedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &OracleClaimedIterator{contract: _Oracle.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *OracleClaimed) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleClaimed)
				if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	Sender   common.Address
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
