// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_labels\",\"type\":\"bytes32[]\"},{\"name\":\"_decimals\",\"type\":\"uint8[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"AddedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"UpdatedTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedProofVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePrivateKey\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = ``

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _ens common.Address, _controllerName [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _ens, _controllerName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCaller) Convert(opts *bind.CallOpts, _token common.Address, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "convert", _token, _amount)
	return *ret0, err
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(_token address, _amount uint256) constant returns(uint256)
func (_Oracle *OracleCallerSession) Convert(_token common.Address, _amount *big.Int) (*big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCaller) Tokens(opts *bind.CallOpts, arg0 common.Address) (struct {
	Label      string
	Decimals   uint8
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	ret := new(struct {
		Label      string
		Decimals   uint8
		Rate       *big.Int
		LastUpdate *big.Int
		Exists     bool
	})
	out := ret
	err := _Oracle.contract.Call(opts, out, "tokens", arg0)
	return *ret, err
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleSession) Tokens(arg0 common.Address) (struct {
	Label      string
	Decimals   uint8
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Tokens is a free data retrieval call binding the contract method 0xe4860339.
//
// Solidity: function tokens( address) constant returns(label string, decimals uint8, rate uint256, lastUpdate uint256, exists bool)
func (_Oracle *OracleCallerSession) Tokens(arg0 common.Address) (struct {
	Label      string
	Decimals   uint8
	Rate       *big.Int
	LastUpdate *big.Int
	Exists     bool
}, error) {
	return _Oracle.Contract.Tokens(&_Oracle.CallOpts, arg0)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(_queryID bytes32, _result string, _proof bytes) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// AddTokens is a paid mutator transaction binding the contract method 0xf48d0e3b.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _decimals uint8[]) returns()
func (_Oracle *OracleTransactor) AddTokens(opts *bind.TransactOpts, _tokens []common.Address, _labels [][32]byte, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "addTokens", _tokens, _labels, _decimals)
}

// AddTokens is a paid mutator transaction binding the contract method 0xf48d0e3b.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _decimals uint8[]) returns()
func (_Oracle *OracleSession) AddTokens(_tokens []common.Address, _labels [][32]byte, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _labels, _decimals)
}

// AddTokens is a paid mutator transaction binding the contract method 0xf48d0e3b.
//
// Solidity: function addTokens(_tokens address[], _labels bytes32[], _decimals uint8[]) returns()
func (_Oracle *OracleTransactorSession) AddTokens(_tokens []common.Address, _labels [][32]byte, _decimals []uint8) (*types.Transaction, error) {
	return _Oracle.Contract.AddTokens(&_Oracle.TransactOpts, _tokens, _labels, _decimals)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactor) RemoveTokens(opts *bind.TransactOpts, _tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "removeTokens", _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// RemoveTokens is a paid mutator transaction binding the contract method 0x6c3824ef.
//
// Solidity: function removeTokens(_tokens address[]) returns()
func (_Oracle *OracleTransactorSession) RemoveTokens(_tokens []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.RemoveTokens(&_Oracle.TransactOpts, _tokens)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(_gasPrice uint256) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(_publicKey bytes) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleTransactor) UpdateTokenRate(opts *bind.TransactOpts, _token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRate", _token, _rate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleSession) UpdateTokenRate(_token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate)
}

// UpdateTokenRate is a paid mutator transaction binding the contract method 0x226ac321.
//
// Solidity: function updateTokenRate(_token address, _rate uint256) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRate(_token common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRate(&_Oracle.TransactOpts, _token, _rate)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates")
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0x83d41509.
//
// Solidity: function updateTokenRates() returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts)
}

// OracleAddedTokenIterator is returned from FilterAddedToken and is used to iterate over the raw logs and unpacked data for AddedToken events raised by the Oracle contract.
type OracleAddedTokenIterator struct {
	Event *OracleAddedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleAddedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleAddedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleAddedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleAddedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleAddedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleAddedToken represents a AddedToken event raised by the Oracle contract.
type OracleAddedToken struct {
	Token    common.Address
	Label    string
	Decimals uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddedToken is a free log retrieval operation binding the contract event 0x598131d450855f4acb5539983af82a2eb42ae7106778bfa80f3d0a6f8235047d.
//
// Solidity: e AddedToken(_token address, _label string, _decimals uint8)
func (_Oracle *OracleFilterer) FilterAddedToken(opts *bind.FilterOpts) (*OracleAddedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return &OracleAddedTokenIterator{contract: _Oracle.contract, event: "AddedToken", logs: logs, sub: sub}, nil
}

// WatchAddedToken is a free log subscription operation binding the contract event 0x598131d450855f4acb5539983af82a2eb42ae7106778bfa80f3d0a6f8235047d.
//
// Solidity: e AddedToken(_token address, _label string, _decimals uint8)
func (_Oracle *OracleFilterer) WatchAddedToken(opts *bind.WatchOpts, sink chan<- *OracleAddedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "AddedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleAddedToken)
				if err := _Oracle.contract.UnpackLog(event, "AddedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleConvertedIterator is returned from FilterConverted and is used to iterate over the raw logs and unpacked data for Converted events raised by the Oracle contract.
type OracleConvertedIterator struct {
	Event *OracleConverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleConvertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleConverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleConverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleConvertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleConvertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleConverted represents a Converted event raised by the Oracle contract.
type OracleConverted struct {
	Token  common.Address
	Amount *big.Int
	Ether  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConverted is a free log retrieval operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) FilterConverted(opts *bind.FilterOpts) (*OracleConvertedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return &OracleConvertedIterator{contract: _Oracle.contract, event: "Converted", logs: logs, sub: sub}, nil
}

// WatchConverted is a free log subscription operation binding the contract event 0xe6a45eea08a42f7c3f90f290e8ecf15e16174981943adf509fc9ea49808a64c6.
//
// Solidity: e Converted(_token address, _amount uint256, _ether uint256)
func (_Oracle *OracleFilterer) WatchConverted(opts *bind.WatchOpts, sink chan<- *OracleConverted) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleConverted)
				if err := _Oracle.contract.UnpackLog(event, "Converted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedProofVerificationIterator is returned from FilterFailedProofVerification and is used to iterate over the raw logs and unpacked data for FailedProofVerification events raised by the Oracle contract.
type OracleFailedProofVerificationIterator struct {
	Event *OracleFailedProofVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedProofVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedProofVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedProofVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedProofVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedProofVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedProofVerification represents a FailedProofVerification event raised by the Oracle contract.
type OracleFailedProofVerification struct {
	PublicKey []byte
	Result    string
	Reason    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterFailedProofVerification is a free log retrieval operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) FilterFailedProofVerification(opts *bind.FilterOpts) (*OracleFailedProofVerificationIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return &OracleFailedProofVerificationIterator{contract: _Oracle.contract, event: "FailedProofVerification", logs: logs, sub: sub}, nil
}

// WatchFailedProofVerification is a free log subscription operation binding the contract event 0x723e3e91b9cce9d0b4060bd81795e46afadf48d65cd0d2c5de2b4fa5be560c5c.
//
// Solidity: e FailedProofVerification(_publicKey bytes, _result string, _reason string)
func (_Oracle *OracleFilterer) WatchFailedProofVerification(opts *bind.WatchOpts, sink chan<- *OracleFailedProofVerification) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedProofVerification")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedProofVerification)
				if err := _Oracle.contract.UnpackLog(event, "FailedProofVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: e FailedUpdateRequest(_reason string)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRemovedTokenIterator is returned from FilterRemovedToken and is used to iterate over the raw logs and unpacked data for RemovedToken events raised by the Oracle contract.
type OracleRemovedTokenIterator struct {
	Event *OracleRemovedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRemovedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRemovedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRemovedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRemovedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRemovedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRemovedToken represents a RemovedToken event raised by the Oracle contract.
type OracleRemovedToken struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRemovedToken is a free log retrieval operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) FilterRemovedToken(opts *bind.FilterOpts) (*OracleRemovedTokenIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return &OracleRemovedTokenIterator{contract: _Oracle.contract, event: "RemovedToken", logs: logs, sub: sub}, nil
}

// WatchRemovedToken is a free log subscription operation binding the contract event 0xc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d748.
//
// Solidity: e RemovedToken(_token address)
func (_Oracle *OracleFilterer) WatchRemovedToken(opts *bind.WatchOpts, sink chan<- *OracleRemovedToken) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RemovedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRemovedToken)
				if err := _Oracle.contract.UnpackLog(event, "RemovedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_label string)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: e RequestedUpdate(_label string)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePrivateKeyIterator is returned from FilterSetCryptoComparePrivateKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePrivateKey events raised by the Oracle contract.
type OracleSetCryptoComparePrivateKeyIterator struct {
	Event *OracleSetCryptoComparePrivateKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePrivateKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePrivateKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePrivateKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePrivateKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePrivateKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePrivateKey represents a SetCryptoComparePrivateKey event raised by the Oracle contract.
type OracleSetCryptoComparePrivateKey struct {
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePrivateKey is a free log retrieval operation binding the contract event 0xbcddb45ee2ba1a718ddbfdeb2a5b711ffd29487c0fecb1f1a0670dbe97fb7e61.
//
// Solidity: e SetCryptoComparePrivateKey(_publicKey bytes)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePrivateKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePrivateKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePrivateKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePrivateKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePrivateKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePrivateKey is a free log subscription operation binding the contract event 0xbcddb45ee2ba1a718ddbfdeb2a5b711ffd29487c0fecb1f1a0670dbe97fb7e61.
//
// Solidity: e SetCryptoComparePrivateKey(_publicKey bytes)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePrivateKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePrivateKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePrivateKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePrivateKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePrivateKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0x149e0b515989ba95a085dcb8c61adbae6e4af1bcb5e8f917f1a12aa55a0511c9.
//
// Solidity: e SetGasPrice(_gasPrice uint256)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleUpdatedTokenRateIterator is returned from FilterUpdatedTokenRate and is used to iterate over the raw logs and unpacked data for UpdatedTokenRate events raised by the Oracle contract.
type OracleUpdatedTokenRateIterator struct {
	Event *OracleUpdatedTokenRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleUpdatedTokenRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleUpdatedTokenRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleUpdatedTokenRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleUpdatedTokenRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleUpdatedTokenRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleUpdatedTokenRate represents a UpdatedTokenRate event raised by the Oracle contract.
type OracleUpdatedTokenRate struct {
	Token common.Address
	Rate  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterUpdatedTokenRate is a free log retrieval operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) FilterUpdatedTokenRate(opts *bind.FilterOpts) (*OracleUpdatedTokenRateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return &OracleUpdatedTokenRateIterator{contract: _Oracle.contract, event: "UpdatedTokenRate", logs: logs, sub: sub}, nil
}

// WatchUpdatedTokenRate is a free log subscription operation binding the contract event 0x0234fc2d2d8a65c42ddbe38a518f7a8b569cd05650e049b517011128b899cf06.
//
// Solidity: e UpdatedTokenRate(_token address, _rate uint256)
func (_Oracle *OracleFilterer) WatchUpdatedTokenRate(opts *bind.WatchOpts, sink chan<- *OracleUpdatedTokenRate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "UpdatedTokenRate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleUpdatedTokenRate)
				if err := _Oracle.contract.UnpackLog(event, "UpdatedTokenRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: e VerifiedProof(_publicKey bytes, _result string)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
