// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"updateTokenRatesList\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"parseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"},{\"name\":\"_tokenWhitelistName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b5060405160808062005fee83398101604081815282516020808501518386015160609687015160058054600160a060020a038516600160a060020a031991821681179092556006849055600780549091169091179055600881905596860185528486527fa0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a98379286019283527f10bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca958501959095529194919392620000d691600991620009b3565b5060008054600160a060020a031916600160a060020a0386161790556200010b6402540be40064010000000062000149810204565b6200013f7ff00000000000000000000000000000000000000000000000000000000000000064010000000062000389810204565b5050505062000a55565b600054600160a060020a031615806200017f57506000546200017d90600160a060020a0316640100000000620005ce810204565b155b156200019c576200019a6000640100000000620005d2810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200020857600080fd5b505af11580156200021d573d6000803e3d6000fd5b505050506040513d60208110156200023457600080fd5b5051600154600160a060020a0390811691161462000306576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620002b857600080fd5b505af1158015620002cd573d6000803e3d6000fd5b505050506040513d6020811015620002e457600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200036d57600080fd5b505af115801562000382573d6000803e3d6000fd5b5050505050565b600054600160a060020a03161580620003bf5750600054620003bd90600160a060020a0316640100000000620005ce810204565b155b15620003dc57620003da6000640100000000620005d2810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200044857600080fd5b505af11580156200045d573d6000803e3d6000fd5b505050506040513d60208110156200047457600080fd5b5051600154600160a060020a0390811691161462000546576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004f857600080fd5b505af11580156200050d573d6000803e3d6000fd5b505050506040513d60208110156200052457600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff00000000000000000000000000000000000000000000000000000000000000841660048201529051600160a060020a039092169163688dcfd79160248082019260009290919082900301818387803b1580156200036d57600080fd5b3b90565b6000620005e7640100000000620005ed810204565b92915050565b60008062000618731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620005ce810204565b1115620006965760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e657400000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b50600162000997565b6000620006c073c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620005ce810204565b1115620007355760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b60006200075f73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620005ce810204565b1115620007d45760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e000000000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b6000620007fe73146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620005ce810204565b1115620008735760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b65627900000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b60006200089d736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620005ce810204565b1115620008d3575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000997565b6000620008fd7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620005ce810204565b111562000933575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000997565b60006200095d7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620005ce810204565b111562000993575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000997565b5060005b90565b8051620009af906002906020840190620009b3565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009f657805160ff191683800117855562000a26565b8280016001018555821562000a26579182015b8281111562000a2657825182559160200191906001019062000a09565b5062000a3492915062000a38565b5090565b6200099791905b8082111562000a34576000815560010162000a3f565b6155898062000a656000396000f30060806040526004361061008a5763ffffffff60e060020a60003504166327dc297e811461008f57806338bbfa50146100ef578063937f54a41461018b578063996cba68146101a25780639f6f99ee146101cc578063a780b2f3146101ec578063b598f882146102ba578063ca6ad1e4146102c5578063cc204119146102dd578063f3fef3a3146102f2575b600080fd5b34801561009b57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100ed9583359536956044949193909101919081908401838280828437509497506103169650505050505050565b005b3480156100fb57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100ed95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506103369650505050505050565b6100ed60048035906024803590810191013561056d565b3480156101ae57600080fd5b506100ed600160a060020a03600435811690602435166044356105f6565b3480156101d857600080fd5b506100ed600480356024810191013561064e565b3480156101f857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102459436949293602493928401919081908401838280828437509497506107069650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027f578181015183820152602001610267565b50505050905090810190601f1680156102ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100ed600435610a84565b3480156102d157600080fd5b506100ed600435610add565b3480156102e957600080fd5b50610245610b71565b3480156102fe57600080fd5b506100ed600160a060020a0360043516602435610bff565b6040805160008152602081019091526103329083908390610336565b5050565b6000806000806000806000610349610c82565b600160a060020a031633146103a8576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b60008a8152600a6020526040902054600160a060020a03169650861515610419576040805160e560020a62461bcd02815260206004820152601c60248201527f71756572794944206d61746368657320746f2061646472657373203000000000604482015290519081900360640190fd5b61042287610e74565b9950509850505050851515610481576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152610519938d938d9383018282801561050e5780601f106104e35761010080835404028352916020019161050e565b820191906000526020600020905b8154815290600101906020018083116104f157829003601f168201915b505050505088611096565b90945092508315610561576105356105308a610706565b6116f3565b60008b8152600a602052604090208054600160a060020a03191690559150829050610561878383611706565b50505050505050505050565b61057633611892565b15156105ba576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206154fe833981519152604482015290519081900360640190fd5b6105f18383838080602002602001604051908101604052809392919081815260200183836020028082843750611a25945050505050565b505050565b6105ff33611892565b1515610643576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206154fe833981519152604482015290519081900360640190fd5b6105f1838383611dbb565b61065733611892565b151561069b576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206154fe833981519152604482015290519081900360640190fd5b6106a7600983836153a0565b506040805133808252602082018381529282018490527fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa9290918591859190606082018484808284376040519201829003965090945050505050a15050565b60606000606061071461541e565b846040516020018082805190602001908083835b602083106107475780518252601f199092019160209182019101610728565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405251925060088311801561078f5750601c8311155b15156107e5576040805160e560020a62461bcd02815260206004820152601260248201527f6d6973666f726d617474656420696e7075740000000000000000000000000000604482015290519081900360640190fd5b604080516007808252818301909252906020820160e08038833901905050915061087b856040516020018082805190602001908083835b6020831061083b5780518252601f19909201916020918201910161081c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260006007856000611f61565b50604080517f7b22455448223a0000000000000000000000000000000000000000000000000081529051908190036007018120835190918491819060208401908083835b602083106108de5780518252601f1990920191602091820191016108bf565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610966576040805160e560020a62461bcd02815260206004820152600f60248201527f707265666978206d69736d617463680000000000000000000000000000000000604482015290519081900360640190fd5b61096f85611fb6565b90506109bf6109b26040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611fb6565b829063ffffffff611fdf16565b5080600001519250610a15610a086040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250611fb6565b829063ffffffff611ff916565b508051600019840114610a72576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f74206a736f6e20666f726d61740000000000000000000000000000000000604482015290519081900360640190fd5b610a7b81612062565b95945050505050565b610a8d33611892565b1515610ad1576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206154fe833981519152604482015290519081900360640190fd5b610ada816120b5565b50565b610ae633611892565b1515610b2a576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206154fe833981519152604482015290519081900360640190fd5b610b33816123dc565b604080513381526020810183905281517ffbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4929181900390910190a150565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bf75780601f10610bcc57610100808354040283529160200191610bf7565b820191906000526020600020905b815481529060010190602001808311610bda57829003601f168201915b505050505081565b610c0833611892565b1515610c4c576040805160e560020a62461bcd02815260206004820152601a60248201526000805160206154fe833981519152604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156105f1573d6000803e3d6000fd5b60008054600160a060020a03161580610cad5750600054610cab90600160a060020a03166125c9565b155b15610cbe57610cbc60006125cd565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d1057600080fd5b505af1158015610d24573d6000803e3d6000fd5b505050506040513d6020811015610d3a57600080fd5b5051600154600160a060020a03908116911614610def576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050506040513d6020811015610dcd57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600160009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b505050506040513d6020811015610e6c57600080fd5b505190505b90565b6007546008546040805160e060020a630178b8bf0281526004810192909252516060926000928392839283928392600160a060020a0390921691630178b8bf9160248082019260209290919082900301818787803b158015610ed557600080fd5b505af1158015610ee9573d6000803e3d6000fd5b505050506040513d6020811015610eff57600080fd5b50516008546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b505050506040513d6020811015610f7c57600080fd5b5051604080517f1f69565f000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015291519190921691631f69565f91602480830192600092919082900301818387803b158015610fe257600080fd5b505af1158015610ff6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260c081101561101f57600080fd5b81019080805164010000000081111561103757600080fd5b8201602081018481111561104a57600080fd5b815164010000000081118282018710171561106457600080fd5b5050602082015160408301516060840151608085015160a090950151939e929d50909b50995091975095509350505050565b6000806060806060600080606060a58b511415156110fe576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c69642070726f6f66206c656e677468000000000000000000000000604482015290519081900360640190fd5b60418b600181518110151561110f57fe5b016020015160f860020a9081900481020414611175576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b604080516041808252608082019092529060208201610820803883390190505095506111a78b60026041896000611f61565b8b519096506060908c9060449081106111bc57fe5b90602001015160f860020a900460f860020a0260f860020a90046101008d60416002018151811015156111eb57fe5b016020015160f860020a90819004810204020114611253576040805160e560020a62461bcd02815260206004820152601660248201527f696e76616c69642068656164657273206c656e67746800000000000000000000604482015290519081900360640190fd5b604080516060808252608082019092529060208201610c00803883390190505094506112858b60456060886000611f61565b945061129285878c6125d7565b15156112e8576040805160e560020a62461bcd02815260206004820152601160248201527f696e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b60408051601480825281830190925290602082016102808038833901905050935061131985600b6014876000611f61565b9350611325848a6126f2565b9093509150821515611381576040805160e560020a62461bcd02815260206004820152600c60248201527f696e76616c696420646174650000000000000000000000000000000000000000604482015290519081900360640190fd5b60408051602c808252606082019092529060208201610580803883390190505090506113b3856034602c846000611f61565b90506113be81612b30565b6040518082805190602001908083835b602083106113ed5780518252601f1990920191602091820191016113ce565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660028d6040516020018082805190602001908083835b602083106114535780518252601f199092019160209182019101611434565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106114b65780518252601f199092019160209182019101611497565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156114f7573d6000803e3d6000fd5b5050506040513d602081101561150c57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106115585780518252601f199092019160209182019101611539565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156115e0576040805160e560020a62461bcd02815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561164457818101518382015260200161162c565b50505050905090810190601f1680156116715780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156116a457818101518382015260200161168c565b50505050905090810190601f1680156116d15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b6000611700826012613548565b92915050565b6007546008546040805160e060020a630178b8bf028152600481019290925251600160a060020a0390921691630178b8bf916024808201926020929091908290030181600087803b15801561175a57600080fd5b505af115801561176e573d6000803e3d6000fd5b505050506040513d602081101561178457600080fd5b50516008546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050506040513d602081101561180157600080fd5b5051604080517fd545782e000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052604482018590529151919092169163d545782e91606480830192600092919082900301818387803b15801561187557600080fd5b505af1158015611889573d6000803e3d6000fd5b50505050505050565b6005546006546040805160e060020a630178b8bf028152600481019290925251600092600160a060020a031691630178b8bf91602480830192602092919082900301818787803b1580156118e557600080fd5b505af11580156118f9573d6000803e3d6000fd5b505050506040513d602081101561190f57600080fd5b50516006546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561196257600080fd5b505af1158015611976573d6000803e3d6000fd5b505050506040513d602081101561198c57600080fd5b5051604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb9160248083019260209291908290030181600087803b1580156119f357600080fd5b505af1158015611a07573d6000803e3d6000fd5b505050506040513d6020811015611a1d57600080fd5b505192915050565b611a2d61541e565b611a3561541e565b600060606000611a4361541e565b6000875160001415611aa2576040805160208082526010908201527f656d70747920746f6b656e206c6973740000000000000000000000000000000081830152905160008051602061551e8339815191529181900360600190a1611db0565b30600160a060020a0316318851611ad660408051908101604052806003815260200160ea60020a6215549302815250614113565b021115611b30576040805160208082526014908201527f696e73756666696369656e742062616c616e636500000000000000000000000081830152905160008051602061551e8339815191529181900360600190a1611db0565b611b95606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d0000000000000000000000000000815250611fb6565b9650611bd56040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250611fb6565b9550600094505b8751851015611db057611c058886815181101515611bf657fe5b90602001906020020151610e74565b5050955050509350821515611c64576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b611c6d84611fb6565b604080518082019091526003815260ea60020a62155493026020820152909250611cbf90611cb988611cad611ca88c8863ffffffff61434516565b611fb6565b9063ffffffff61434516565b8b6143bc565b90508785815181101515611ccf57fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05611d3183612062565b6040805160208082528351818301528351919283929083019185019080838360005b83811015611d6b578181015183820152602001611d53565b50505050905090810190601f168015611d985780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600190940193611bdc565b505050505050505050565b600160a060020a0382161515611e0757604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015611e01573d6000803e3d6000fd5b50611f12565b81600160a060020a031663a9059cbb84836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015611e6a57600080fd5b505af1158015611e7e573d6000803e3d6000fd5b505050506040513d6020811015611e9457600080fd5b50511515611f12576040805160e560020a62461bcd02815260206004820152602560248201527f455243323020746f6b656e207472616e736665722077617320756e737563636560448201527f737366756c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60408051600160a060020a0380861682528416602082015280820183905290517ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839181900360600190a1505050565b60606000806000848701925082865110151515611f7d57600080fd5b505060208087019084015b868860200101821015611fa957888201518682015260209182019101611f88565b5093979650505050505050565b611fbe61541e565b50604080518082019091528151815260208281019082018190525b50919050565b611fe761541e565b611ff28383836147bb565b5092915050565b61200161541e565b81518351600091829110156120185784925061205a565b50508151835160208086015190850151910191909103906001908214612048575082516020840151819020908220145b801561205657835185510385525b8492505b505092915050565b606080600083600001516040519080825280601f01601f191660200182016040528015612099578160200160208202803883390190505b509150602082019050611ff2818560200151866000015161482c565b60606120bf61541e565b6120c761541e565b600060606120d361541e565b60006120dd614870565b965086516000141561213c576040805160208082526009908201527f6e6f20746f6b656e73000000000000000000000000000000000000000000000081830152905160008051602061551e8339815191529181900360600190a16123d2565b30600160a060020a031631875161217060408051908101604052806003815260200160ea60020a6215549302815250614113565b0211156121ca576040805160208082526014908201527f696e73756666696369656e742062616c616e636500000000000000000000000081830152905160008051602061551e8339815191529181900360600190a16123d2565b61222f606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d0000000000000000000000000000815250611fb6565b955061226f6040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250611fb6565b9450600093505b86518410156123d2576122908785815181101515611bf657fe5b505050505092506122a083611fb6565b604080518082019091526003815260ea60020a621554930260208201529092506122e1906122db87611cad611ca88b8863ffffffff61434516565b8a6143bc565b905086848151811015156122f157fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c0561235383612062565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561238d578181015183820152602001612375565b50505050905090810190601f1680156123ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600190930192612276565b5050505050505050565b600054600160a060020a03161580612406575060005461240490600160a060020a03166125c9565b155b156124175761241560006125cd565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561246957600080fd5b505af115801561247d573d6000803e3d6000fd5b505050506040513d602081101561249357600080fd5b5051600154600160a060020a03908116911614612548576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156124fc57600080fd5b505af1158015612510573d6000803e3d6000fd5b505050506040513d602081101561252657600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156125ae57600080fd5b505af11580156125c2573d6000803e3d6000fd5b5050505050565b3b90565b6000611700614a59565b600080600061266f6002876040518082805190602001908083835b602083106126115780518252601f1990920191602091820191016125f2565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015612652573d6000803e3d6000fd5b5050506040513d602081101561266757600080fd5b505186614d81565b925090508080156126e85750836040518082805190602001908083835b602083106126ab5780518252601f19909201916020918201910161268c565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600160a060020a0390811690861614925050505b9695505050505050565b6000806126fd61541e565b61270561541e565b61270d61541e565b60008060008060008060008d6040516020018082805190602001908083835b6020831061274b5780518252601f19909201916020918201910161272c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405251601414151561278b57fe5b6127948e611fb6565b99506127d46040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611fb6565b98506128146040805190810160405280600181526020017f2000000000000000000000000000000000000000000000000000000000000000815250611fb6565b975061283661283161282c8c8b63ffffffff611fdf16565b612062565b614e09565b96506000871180156128485750602087105b151561289e576040805160e560020a62461bcd02815260206004820152600960248201527f646179206572726f720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6128b96128b461282c8c8b63ffffffff611fdf16565b614e16565b60ff1695506000861180156128ce5750600d86105b1515612924576040805160e560020a62461bcd02815260206004820152600b60248201527f6d6f6e7468206572726f72000000000000000000000000000000000000000000604482015290519081900360640190fd5b61293a61283161282c8c8b63ffffffff611fdf16565b94506107e18511801561294e5750610bb885105b15156129a4576040805160e560020a62461bcd02815260206004820152600a60248201527f79656172206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b6129ba61283161282c8c8c63ffffffff611fdf16565b935060198410612a14576040805160e560020a62461bcd02815260206004820152600a60248201527f686f7572206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b612a2a61283161282c8c8c63ffffffff611fdf16565b9250603c8310612a84576040805160e560020a62461bcd02815260206004820152600c60248201527f6d696e757465206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b612a9a61283161282c8c8c63ffffffff611fdf16565b9150603c8210612af4576040805160e560020a62461bcd02815260206004820152600c60248201527f7365636f6e64206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b506402540be40084026305f5e100860201620f4240870201612710840201606483020181018c81119b5099505050505050505050509250929050565b60606000806000806000606060008060008a519450846040519080825280601f01601f191660200182016040528015612b73578160200160208202803883390190505b509350600085118015612b87575060048506155b1515612bdd576040805160e560020a62461bcd02815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906001198801908110612c2157fe5b90602001015160f860020a900460f860020a026040516020018082600160f860020a031916600160f860020a03191681526001019150506040516020818303038152906040526040518082805190602001908083835b60208310612c965780518252601f199092019160209182019101612c77565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612cd857600285039450612dcf565b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906000198801908110612d1c57fe5b90602001015160f860020a900460f860020a026040516020018082600160f860020a031916600160f860020a03191681526001019150506040516020818303038152906040526040518082805190602001908083835b60208310612d915780518252601f199092019160209182019101612d72565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612dcf576001850394505b505060048084040260005b81811015613131576040805160a081018252607b8152600060208201526000805160206154de8339815191529181019190915260008051602061553e83398151915260608201526000805160206154be83398151915260808201528b5160018301928d918110612e4657fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612e6c57fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001600081526020016000805160206154de833981519152815260200160008051602061553e83398151915281526020016000805160206154be8339815191528152508b82806001019350815181101515612ee957fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612f0f57fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b8152602001600081526020016000805160206154de833981519152815260200160008051602061553e83398151915281526020016000805160206154be8339815191528152508b82806001019350815181101515612f8c57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612fb257fe5b90602001015160f860020a900460f860020a02965060a060405190810160405280607b8152602001600081526020016000805160206154de833981519152815260200160008051602061553e83398151915281526020016000805160206154be8339815191528152508b8280600101935081518110151561302f57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561305557fe5b0160200151845160f860020a9182900490910296506001840193600160f860020a03198b81166004026010828d1604171691869190811061309257fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c160417169186919081106130d757fe5b906020010190600160f860020a031916908160001a90535083516001840193600160f860020a031989811660400289171691869190811061311457fe5b906020010190600160f860020a031916908160001a905350612dda565b818503600214156132c3576040805160a081018252607b8152600060208201526000805160206154de8339815191529181019190915260008051602061553e83398151915260608201526000805160206154be83398151915260808201528b5160018301928d9181106131a057fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156131c657fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001600081526020016000805160206154de833981519152815260200160008051602061553e83398151915281526020016000805160206154be8339815191528152508b8280600101935081518110151561324357fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561326957fe5b0160200151845160f860020a9182900490910298506001840193600160f860020a03198b81166004026010828d160417169186919081106132a657fe5b906020010190600160f860020a031916908160001a905350613539565b81850360031415613539576040805160a081018252607b8152600060208201526000805160206154de8339815191529181019190915260008051602061553e83398151915260608201526000805160206154be83398151915260808201528b5160018301928d91811061333257fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561335857fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001600081526020016000805160206154de833981519152815260200160008051602061553e83398151915281526020016000805160206154be8339815191528152508b828060010193508151811015156133d557fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156133fb57fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b8152602001600081526020016000805160206154de833981519152815260200160008051602061553e83398151915281526020016000805160206154be8339815191528152508b8280600101935081518110151561347857fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561349e57fe5b0160200151845160f860020a9182900490910297506001840193600160f860020a03198b81166004026010828d160417169186919081106134db57fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c1604171691869190811061352057fe5b906020010190600160f860020a031916908160001a9053505b50508152979650505050505050565b60008281808080808080808080805b8b51811015613dc4578b517f3000000000000000000000000000000000000000000000000000000000000000908d908390811061359057fe5b90602001015160f860020a900460f860020a02600160f860020a0319161015801561360657508b517f3900000000000000000000000000000000000000000000000000000000000000908d90839081106135e657fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b8015613610575083155b156136da57841561367b5761362c8a600a63ffffffff61524916565b8c51909a5061366e906030908e908490811061364457fe5b90602001015160f860020a900460f860020a0260f860020a9004038b61527e90919063ffffffff16565b99506001909701966136d5565b600195506136908b600a63ffffffff61524916565b8c51909b506136d2906030908e90849081106136a857fe5b90602001015160f860020a900460f860020a0260f860020a9004038c61527e90919063ffffffff16565b9a505b613dbc565b8b517f3000000000000000000000000000000000000000000000000000000000000000908d908390811061370a57fe5b90602001015160f860020a900460f860020a02600160f860020a0319161015801561378057508b517f3900000000000000000000000000000000000000000000000000000000000000908d908390811061376057fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b80156137895750835b156137e85761379f89600a63ffffffff61524916565b8c519099506137e1906030908e90849081106137b757fe5b90602001015160f860020a900460f860020a0260f860020a9004038a61527e90919063ffffffff16565b9850613dbc565b8b517f2e00000000000000000000000000000000000000000000000000000000000000908d908390811061381857fe5b90602001015160f860020a900460f860020a02600160f860020a031916141561394757851515613892576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b84156138e8576040805160e560020a62461bcd02815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b831561393e576040805160e560020a62461bcd02815260206004820152601660248201527f646563696d616c206166746572206578706f6e656e7400000000000000000000604482015290519081900360640190fd5b60019450613dbc565b8b517f2d00000000000000000000000000000000000000000000000000000000000000908d908390811061397757fe5b90602001015160f860020a900460f860020a02600160f860020a0319161415613aa95782156139f0576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202d000000000000000000000000000000000000000000604482015290519081900360640190fd5b8115613a46576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613aa0576040805160e560020a62461bcd02815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019250613dbc565b8b517f2b00000000000000000000000000000000000000000000000000000000000000908d9083908110613ad957fe5b90602001015160f860020a900460f860020a02600160f860020a0319161415613c0b578115613b52576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202b000000000000000000000000000000000000000000604482015290519081900360640190fd5b8215613ba8576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613c02576040805160e560020a62461bcd02815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019150613dbc565b8b517f4500000000000000000000000000000000000000000000000000000000000000908d9083908110613c3b57fe5b90602001015160f860020a900460f860020a02600160f860020a0319161480613cae57508b517f6500000000000000000000000000000000000000000000000000000000000000908d9083908110613c8f57fe5b90602001015160f860020a900460f860020a02600160f860020a031916145b15613d6c57851515613d0a576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b8315613d60576040805160e560020a62461bcd02815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b60019350809650613dbc565b6040805160e560020a62461bcd02815260206004820152600d60248201527f696e76616c696420646967697400000000000000000000000000000000000000604482015290519081900360640190fd5b600101613557565b8280613dcd5750815b15613de657600287018111613de157600080fd5b613dfb565b8315613dfb57600187018111613dfb57600080fd5b8215613e87578d8910613e7d57604e8e8a0310613e62576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b8d8903600a0a8b811515613e7257fe5b049a508a9c50614101565b888e039d50613e9a565b613e978e8a63ffffffff61527e16565b9d505b878e10613fc057604e8810613f1f576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b613f338b600a8a900a63ffffffff61524916565b9a50613f458b8b63ffffffff61527e16565b9a50604e888f0310613fa1576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b613fb9888f03600a0a8c61524990919063ffffffff16565b9a506140fd565b968d900396604e8810614043576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b87600a0a8a81151561405157fe5b049950604e8e106140d2576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6140e88e600a0a8c61524990919063ffffffff16565b9a506140fa8b8b63ffffffff61527e16565b9a505b8a9c505b50505050505050505050505092915050565b60008054600160a060020a0316158061413e575060005461413c90600160a060020a03166125c9565b155b1561414f5761414d60006125cd565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156141a157600080fd5b505af11580156141b5573d6000803e3d6000fd5b505050506040513d60208110156141cb57600080fd5b5051600154600160a060020a03908116911614614280576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561423457600080fd5b505af1158015614248573d6000803e3d6000fd5b505050506040513d602081101561425e57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b838110156142f95781810151838201526020016142e1565b50505050905090810190601f1680156143265780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156119f357600080fd5b606080600083600001518560000151016040519080825280601f01601f191660200182016040528015614382578160200160208202803883390190505b50915060208201905061439e818660200151876000015161482c565b8451602085015185516143b4928401919061482c565b509392505050565b600080548190600160a060020a031615806143e957506000546143e790600160a060020a03166125c9565b155b156143fa576143f860006125cd565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561444c57600080fd5b505af1158015614460573d6000803e3d6000fd5b505050506040513d602081101561447657600080fd5b5051600154600160a060020a0390811691161461452b576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156144df57600080fd5b505af11580156144f3573d6000803e3d6000fd5b505050506040513d602081101561450957600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810186905260048101918252875160448201528751600160a060020a0390931692632ef3accc9289928892829160640190602086019080838360005b838110156145ab578181015183820152602001614593565b50505050905090810190601f1680156145d85780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156145f857600080fd5b505af115801561460c573d6000803e3d6000fd5b505050506040513d602081101561462257600080fd5b50519050670de0b6b3a76400003a84020181111561464357600091506143b4565b6001546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b838110156146d65781810151838201526020016146be565b50505050905090810190601f1680156147035780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561473657818101518382015260200161471e565b50505050905090810190601f1680156147635780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b15801561478557600080fd5b505af1158015614799573d6000803e3d6000fd5b50505050506040513d60208110156147b057600080fd5b505195945050505050565b6147c361541e565b60006147e18560000151866020015186600001518760200151615290565b6020808701805191860191909152805182038552865190519192500181141561480d5760008552614823565b8351835186519101900385528351810160208601525b50909392505050565b60005b60208210614851578251845260209384019390920191601f199091019061482f565b50905182516020929092036101000a6000190180199091169116179052565b6007546008546040805160e060020a630178b8bf028152600481019290925251606092600160a060020a031691630178b8bf9160248083019260209291908290030181600087803b1580156148c457600080fd5b505af11580156148d8573d6000803e3d6000fd5b505050506040513d60208110156148ee57600080fd5b50516008546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561494157600080fd5b505af1158015614955573d6000803e3d6000fd5b505050506040513d602081101561496b57600080fd5b5051604080517fe81239ac0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163e81239ac9160048082019260009290919082900301818387803b1580156149c957600080fd5b505af11580156149dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015614a0657600080fd5b810190808051640100000000811115614a1e57600080fd5b82016020810184811115614a3157600080fd5b8151856020820283011164010000000082111715614a4e57600080fd5b509094505050505090565b600080614a79731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6125c9565b1115614aea5760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152614ae290615350565b506001610e71565b6000614b0973c03a2615d5efaf5f49f60b7bb6583eaec212fdf16125c9565b1115614b725760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152614ae290615350565b6000614b9173b7a07bcf2ba2f2703b24c0691b5278999c59ac7e6125c9565b1115614bfa5760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152614ae290615350565b6000614c1973146500cfd35b22e4a392fe0adc06de1a1368ed486125c9565b1115614c825760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152614ae290615350565b6000614ca1736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4756125c9565b1115614cd5575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001610e71565b6000614cf47320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6125c9565b1115614d28575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001610e71565b6000614d477351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6125c9565b1115614d7b575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001610e71565b50600090565b600080600080600085516041141515614da05760009450849350614dff565b50505060208301516040840151606085015160001a601b60ff82161015614dc557601b015b8060ff16601b14158015614ddd57508060ff16601c14155b15614dee5760009450849350614dff565b614dfa87828585615363565b945094505b5050509250929050565b6000611700826000613548565b600080826040516020018082805190602001908083835b60208310614e4c5780518252601f199092019160209182019101614e2d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310614eaf5780518252601f199092019160209182019101614e90565b5181516000196020949094036101000a93909301928316921916919091179052604080519390910183900383207f4a616e00000000000000000000000000000000000000000000000000000000008452905192839003600301909220919450508314159150614f2390505760019150611fd9565b604080517f466562000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614f655760029150611fd9565b604080517f4d6172000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614fa75760039150611fd9565b604080517f417072000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614fe95760049150611fd9565b604080517f4d617900000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561502b5760059150611fd9565b604080517f4a756e00000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561506d5760069150611fd9565b604080517f4a756c0000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156150af5760079150611fd9565b604080517f4175670000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156150f15760089150611fd9565b604080517f5365700000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156151335760099150611fd9565b604080517f4f637400000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561517557600a9150611fd9565b604080517f4e6f760000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156151b757600b9150611fd9565b604080517f4465630000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156151f957600c9150611fd9565b6040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b60008083151561525c5760009150611ff2565b5082820282848281151561526c57fe5b041461527757600080fd5b9392505050565b60008282018381101561527757600080fd5b600083818080808080808c8b1161533a5760208b116153035760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b8285146152fb578388106152e8578c8c019850615340565b87806001019850508588511692506152d0565b879850615340565b8a8a209150600096505b8a8d03871161533a57508987208181141561532a57879850615340565b600197880197969096019561530d565b8c8c0198505b5050505050505050949350505050565b8051610332906002906020840190615435565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106153e15782800160ff1982351617855561540e565b8280016001018555821561540e579182015b8281111561540e5782358255916020019190600101906153f3565b5061541a9291506154a3565b5090565b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061547657805160ff191683800117855561540e565b8280016001018555821561540e579182015b8281111561540e578251825591602001919060010190615488565b610e7191905b8082111561541a57600081556001016154a95600001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000073656e646572206973206e6f74206120636f6e74726f6c6c65720000000000004eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e00000102030405060708090a0b0c0d0e0f10111213141516171819000000003fa165627a7a723058205d628d9be863a53bca80f5d3135f3cd163fc1033b8be3b7e97febae99c61628c0029`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _ens common.Address, _controllerName [32]byte, _tokenWhitelistName [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _ens, _controllerName, _tokenWhitelistName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleCaller) ParseRate(opts *bind.CallOpts, _json string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "parseRate", _json)
	return *ret0, err
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleSession) ParseRate(_json string) (string, error) {
	return _Oracle.Contract.ParseRate(&_Oracle.CallOpts, _json)
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleCallerSession) ParseRate(_json string) (string, error) {
	return _Oracle.Contract.ParseRate(&_Oracle.CallOpts, _json)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Claim(opts *bind.TransactOpts, _to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "claim", _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts, _gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates", _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactor) UpdateTokenRatesList(opts *bind.TransactOpts, _gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRatesList", _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Withdraw(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "withdraw", _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// OracleClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Oracle contract.
type OracleClaimedIterator struct {
	Event *OracleClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleClaimed represents a Claimed event raised by the Oracle contract.
type OracleClaimed struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) FilterClaimed(opts *bind.FilterOpts) (*OracleClaimedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &OracleClaimedIterator{contract: _Oracle.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *OracleClaimed) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleClaimed)
				if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	Sender   common.Address
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
