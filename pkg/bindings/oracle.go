// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"updateTokenRatesList\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"parseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_controllerName\",\"type\":\"bytes32\"},{\"name\":\"_tokenWhitelistName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b5060405160808062005e8083398101604081815282516020808501518386015160609687015160058054600160a060020a038516600160a060020a031991821681179092556006849055600780549091169091179055600881905596860185528486527fa0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a98379286019283527f10bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca958501959095529194919392620000d691600991620009b3565b5060008054600160a060020a031916600160a060020a0386161790556200010b6402540be40064010000000062000149810204565b6200013f7ff00000000000000000000000000000000000000000000000000000000000000064010000000062000389810204565b5050505062000a55565b600054600160a060020a031615806200017f57506000546200017d90600160a060020a0316640100000000620005ce810204565b155b156200019c576200019a6000640100000000620005d2810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200020857600080fd5b505af11580156200021d573d6000803e3d6000fd5b505050506040513d60208110156200023457600080fd5b5051600154600160a060020a0390811691161462000306576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620002b857600080fd5b505af1158015620002cd573d6000803e3d6000fd5b505050506040513d6020811015620002e457600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200036d57600080fd5b505af115801562000382573d6000803e3d6000fd5b5050505050565b600054600160a060020a03161580620003bf5750600054620003bd90600160a060020a0316640100000000620005ce810204565b155b15620003dc57620003da6000640100000000620005d2810204565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200044857600080fd5b505af11580156200045d573d6000803e3d6000fd5b505050506040513d60208110156200047457600080fd5b5051600154600160a060020a0390811691161462000546576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004f857600080fd5b505af11580156200050d573d6000803e3d6000fd5b505050506040513d60208110156200052457600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff00000000000000000000000000000000000000000000000000000000000000841660048201529051600160a060020a039092169163688dcfd79160248082019260009290919082900301818387803b1580156200036d57600080fd5b3b90565b6000620005e7640100000000620005ed810204565b92915050565b60008062000618731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620005ce810204565b1115620006965760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e657400000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b50600162000997565b6000620006c073c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620005ce810204565b1115620007355760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b60006200075f73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620005ce810204565b1115620007d45760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e000000000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b6000620007fe73146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620005ce810204565b1115620008735760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b65627900000000000000000000000000000000000000000060208201526200068d906401000000006200099a810204565b60006200089d736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620005ce810204565b1115620008d3575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000997565b6000620008fd7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620005ce810204565b111562000933575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000997565b60006200095d7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620005ce810204565b111562000993575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000997565b5060005b90565b8051620009af906002906020840190620009b3565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009f657805160ff191683800117855562000a26565b8280016001018555821562000a26579182015b8281111562000a2657825182559160200191906001019062000a09565b5062000a3492915062000a38565b5090565b6200099791905b8082111562000a34576000815560010162000a3f565b61541b8062000a656000396000f30060806040526004361061008a5763ffffffff60e060020a60003504166327dc297e811461008f57806338bbfa50146100ef57806367c6e39c1461018b578063937f54a4146101ca5780639f6f99ee146101e1578063a780b2f314610201578063b598f882146102cf578063ca6ad1e4146102da578063cc204119146102f2578063f3fef3a314610307575b600080fd5b34801561009b57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100ed95833595369560449491939091019190819084018382808284375094975061032b9650505050505050565b005b3480156100fb57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100ed95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061034b9650505050505050565b34801561019757600080fd5b506101af600160a060020a0360043516602435610535565b60408051921515835260208301919091528051918290030190f35b6100ed6004803590602480359081019101356105e9565b3480156101ed57600080fd5b506100ed6004803560248101910135610672565b34801561020d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261025a94369492936024939284019190819084018382808284375094975061072a9650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029457818101518382015260200161027c565b50505050905090810190601f1680156102c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100ed600435610aa8565b3480156102e657600080fd5b506100ed600435610b01565b3480156102fe57600080fd5b5061025a610b95565b34801561031357600080fd5b506100ed600160a060020a0360043516602435610c23565b604080516000815260208101909152610347908390839061034b565b5050565b60008060008060008061035c610ca6565b600160a060020a031633146103bb576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b6000898152600a6020526040902054600160a060020a0316955085151561042c576040805160e560020a62461bcd02815260206004820152601c60248201527f71756572794944206d61746368657320746f2061646472657373203000000000604482015290519081900360640190fd5b61043586610e98565b995050505050506104e2888860098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b5050505050886110ba565b9094509250831561052a576104fe6104f98961072a565b611717565b60008a8152600a602052604090208054600160a060020a0319169055915082905061052a86838361172a565b505050505050505050565b600080600080600061054687610e98565b50509350935093505080156105d7578115156105ac576040805160e560020a62461bcd02815260206004820152600f60248201527f746f6b656e207261746520697320300000000000000000000000000000000000604482015290519081900360640190fd5b60016105ce846105c2898663ffffffff6118b616565b9063ffffffff6118ef16565b945094506105df565b600094508493505b5050509250929050565b6105f233611912565b1515610636576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020615390833981519152604482015290519081900360640190fd5b61066d8383838080602002602001604051908101604052809392919081815260200183836020028082843750611aa5945050505050565b505050565b61067b33611912565b15156106bf576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020615390833981519152604482015290519081900360640190fd5b6106cb60098383615232565b506040805133808252602082018381529282018490527fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa9290918591859190606082018484808284376040519201829003965090945050505050a15050565b6060600060606107386152b0565b846040516020018082805190602001908083835b6020831061076b5780518252601f19909201916020918201910161074c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525192506008831180156107b35750601c8311155b1515610809576040805160e560020a62461bcd02815260206004820152601260248201527f6d6973666f726d617474656420696e7075740000000000000000000000000000604482015290519081900360640190fd5b604080516007808252818301909252906020820160e08038833901905050915061089f856040516020018082805190602001908083835b6020831061085f5780518252601f199092019160209182019101610840565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260006007856000611e30565b50604080517f7b22455448223a0000000000000000000000000000000000000000000000000081529051908190036007018120835190918491819060208401908083835b602083106109025780518252601f1990920191602091820191016108e3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561098a576040805160e560020a62461bcd02815260206004820152600f60248201527f707265666978206d69736d617463680000000000000000000000000000000000604482015290519081900360640190fd5b61099385611e85565b90506109e36109d66040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611e85565b829063ffffffff611eae16565b5080600001519250610a39610a2c6040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250611e85565b829063ffffffff611ec116565b508051600019840114610a96576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f74206a736f6e20666f726d61740000000000000000000000000000000000604482015290519081900360640190fd5b610a9f81611f2a565b95945050505050565b610ab133611912565b1515610af5576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020615390833981519152604482015290519081900360640190fd5b610afe81611f7d565b50565b610b0a33611912565b1515610b4e576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020615390833981519152604482015290519081900360640190fd5b610b57816122a4565b604080513381526020810183905281517ffbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4929181900390910190a150565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c1b5780601f10610bf057610100808354040283529160200191610c1b565b820191906000526020600020905b815481529060010190602001808311610bfe57829003601f168201915b505050505081565b610c2c33611912565b1515610c70576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020615390833981519152604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561066d573d6000803e3d6000fd5b60008054600160a060020a03161580610cd15750600054610ccf90600160a060020a0316612491565b155b15610ce257610ce06000612495565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b505050506040513d6020811015610d5e57600080fd5b5051600154600160a060020a03908116911614610e13576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610dc757600080fd5b505af1158015610ddb573d6000803e3d6000fd5b505050506040513d6020811015610df157600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600160009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e6657600080fd5b505af1158015610e7a573d6000803e3d6000fd5b505050506040513d6020811015610e9057600080fd5b505190505b90565b6007546008546040805160e060020a630178b8bf0281526004810192909252516060926000928392839283928392600160a060020a0390921691630178b8bf9160248082019260209290919082900301818787803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b505050506040513d6020811015610f2357600080fd5b50516008546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b158015610f7657600080fd5b505af1158015610f8a573d6000803e3d6000fd5b505050506040513d6020811015610fa057600080fd5b5051604080517f1f69565f000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015291519190921691631f69565f91602480830192600092919082900301818387803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260c081101561104357600080fd5b81019080805164010000000081111561105b57600080fd5b8201602081018481111561106e57600080fd5b815164010000000081118282018710171561108857600080fd5b5050602082015160408301516060840151608085015160a090950151939e929d50909b50995091975095509350505050565b6000806060806060600080606060a58b51141515611122576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c69642070726f6f66206c656e677468000000000000000000000000604482015290519081900360640190fd5b60418b600181518110151561113357fe5b016020015160f860020a9081900481020414611199576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b604080516041808252608082019092529060208201610820803883390190505095506111cb8b60026041896000611e30565b8b519096506060908c9060449081106111e057fe5b90602001015160f860020a900460f860020a0260f860020a90046101008d604160020181518110151561120f57fe5b016020015160f860020a90819004810204020114611277576040805160e560020a62461bcd02815260206004820152601660248201527f696e76616c69642068656164657273206c656e67746800000000000000000000604482015290519081900360640190fd5b604080516060808252608082019092529060208201610c00803883390190505094506112a98b60456060886000611e30565b94506112b685878c61249f565b151561130c576040805160e560020a62461bcd02815260206004820152601160248201527f696e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b60408051601480825281830190925290602082016102808038833901905050935061133d85600b6014876000611e30565b9350611349848a6125ba565b90935091508215156113a5576040805160e560020a62461bcd02815260206004820152600c60248201527f696e76616c696420646174650000000000000000000000000000000000000000604482015290519081900360640190fd5b60408051602c808252606082019092529060208201610580803883390190505090506113d7856034602c846000611e30565b90506113e2816129f8565b6040518082805190602001908083835b602083106114115780518252601f1990920191602091820191016113f2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660028d6040516020018082805190602001908083835b602083106114775780518252601f199092019160209182019101611458565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106114da5780518252601f1990920191602091820191016114bb565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561151b573d6000803e3d6000fd5b5050506040513d602081101561153057600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b6020831061157c5780518252601f19909201916020918201910161155d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515611604576040805160e560020a62461bcd02815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611668578181015183820152602001611650565b50505050905090810190601f1680156116955780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156116c85781810151838201526020016116b0565b50505050905090810190601f1680156116f55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b6000611724826012613410565b92915050565b6007546008546040805160e060020a630178b8bf028152600481019290925251600160a060020a0390921691630178b8bf916024808201926020929091908290030181600087803b15801561177e57600080fd5b505af1158015611792573d6000803e3d6000fd5b505050506040513d60208110156117a857600080fd5b50516008546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b1580156117fb57600080fd5b505af115801561180f573d6000803e3d6000fd5b505050506040513d602081101561182557600080fd5b5051604080517fd545782e000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052604482018590529151919092169163d545782e91606480830192600092919082900301818387803b15801561189957600080fd5b505af11580156118ad573d6000803e3d6000fd5b50505050505050565b6000808315156118c957600091506118e8565b508282028284828115156118d957fe5b04146118e457600080fd5b8091505b5092915050565b6000808083116118fe57600080fd5b828481151561190957fe5b04949350505050565b6005546006546040805160e060020a630178b8bf028152600481019290925251600092600160a060020a031691630178b8bf91602480830192602092919082900301818787803b15801561196557600080fd5b505af1158015611979573d6000803e3d6000fd5b505050506040513d602081101561198f57600080fd5b50516006546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d6020811015611a0c57600080fd5b5051604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb9160248083019260209291908290030181600087803b158015611a7357600080fd5b505af1158015611a87573d6000803e3d6000fd5b505050506040513d6020811015611a9d57600080fd5b505192915050565b611aad6152b0565b611ab56152b0565b600060606000611ac36152b0565b6000875160001415611b22576040805160208082526010908201527f656d70747920746f6b656e206c697374000000000000000000000000000000008183015290516000805160206153b08339815191529181900360600190a161052a565b30600160a060020a0316318851611b5660408051908101604052806003815260200160ea60020a6215549302815250613fdb565b021115611bb0576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206153b08339815191529181900360600190a161052a565b611c15606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d0000000000000000000000000000815250611e85565b9650611c556040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250611e85565b9550600094505b875185101561052a57611c858886815181101515611c7657fe5b90602001906020020151610e98565b5050955050509350821515611ce4576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b611ced84611e85565b604080518082019091526003815260ea60020a62155493026020820152909250611d3f90611d3988611d2d611d288c8863ffffffff61420d16565b611e85565b9063ffffffff61420d16565b8b614284565b90508785815181101515611d4f57fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05611db183611f2a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015611deb578181015183820152602001611dd3565b50505050905090810190601f168015611e185780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600190940193611c5c565b60606000806000848701925082865110151515611e4c57600080fd5b505060208087019084015b868860200101821015611e7857888201518682015260209182019101611e57565b5093979650505050505050565b611e8d6152b0565b50604080518082019091528151815260208281019082018190525b50919050565b611eb66152b0565b6118e8838383614683565b611ec96152b0565b8151835160009182911015611ee057849250611f22565b50508151835160208086015190850151910191909103906001908214611f10575082516020840151819020908220145b8015611f1e57835185510385525b8492505b505092915050565b606080600083600001516040519080825280601f01601f191660200182016040528015611f61578160200160208202803883390190505b5091506020820190506118e881856020015186600001516146f4565b6060611f876152b0565b611f8f6152b0565b60006060611f9b6152b0565b6000611fa5614738565b9650865160001415612004576040805160208082526009908201527f6e6f20746f6b656e7300000000000000000000000000000000000000000000008183015290516000805160206153b08339815191529181900360600190a161229a565b30600160a060020a031631875161203860408051908101604052806003815260200160ea60020a6215549302815250613fdb565b021115612092576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206153b08339815191529181900360600190a161229a565b6120f7606060405190810160405280603281526020017f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f81526020017f6d2f646174612f70726963653f6673796d3d0000000000000000000000000000815250611e85565b95506121376040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250611e85565b9450600093505b865184101561229a576121588785815181101515611c7657fe5b5050505050925061216883611e85565b604080518082019091526003815260ea60020a621554930260208201529092506121a9906121a387611d2d611d288b8863ffffffff61420d16565b8a614284565b905086848151811015156121b957fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557fd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c0561221b83611f2a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561225557818101518382015260200161223d565b50505050905090810190601f1680156122825780820380516001836020036101000a031916815260200191505b509250505060405180910390a160019093019261213e565b5050505050505050565b600054600160a060020a031615806122ce57506000546122cc90600160a060020a0316612491565b155b156122df576122dd6000612495565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561233157600080fd5b505af1158015612345573d6000803e3d6000fd5b505050506040513d602081101561235b57600080fd5b5051600154600160a060020a03908116911614612410576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156123c457600080fd5b505af11580156123d8573d6000803e3d6000fd5b505050506040513d60208110156123ee57600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b15801561247657600080fd5b505af115801561248a573d6000803e3d6000fd5b5050505050565b3b90565b6000611724614921565b60008060006125376002876040518082805190602001908083835b602083106124d95780518252601f1990920191602091820191016124ba565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561251a573d6000803e3d6000fd5b5050506040513d602081101561252f57600080fd5b505186614c49565b925090508080156125b05750836040518082805190602001908083835b602083106125735780518252601f199092019160209182019101612554565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600160a060020a0390811690861614925050505b9695505050505050565b6000806125c56152b0565b6125cd6152b0565b6125d56152b0565b60008060008060008060008d6040516020018082805190602001908083835b602083106126135780518252601f1990920191602091820191016125f4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405251601414151561265357fe5b61265c8e611e85565b995061269c6040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611e85565b98506126dc6040805190810160405280600181526020017f2000000000000000000000000000000000000000000000000000000000000000815250611e85565b97506126fe6126f96126f48c8b63ffffffff611eae16565b611f2a565b614cd0565b96506000871180156127105750602087105b1515612766576040805160e560020a62461bcd02815260206004820152600960248201527f646179206572726f720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61278161277c6126f48c8b63ffffffff611eae16565b614cdd565b60ff1695506000861180156127965750600d86105b15156127ec576040805160e560020a62461bcd02815260206004820152600b60248201527f6d6f6e7468206572726f72000000000000000000000000000000000000000000604482015290519081900360640190fd5b6128026126f96126f48c8b63ffffffff611eae16565b94506107e1851180156128165750610bb885105b151561286c576040805160e560020a62461bcd02815260206004820152600a60248201527f79656172206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b6128826126f96126f48c8c63ffffffff611eae16565b9350601984106128dc576040805160e560020a62461bcd02815260206004820152600a60248201527f686f7572206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b6128f26126f96126f48c8c63ffffffff611eae16565b9250603c831061294c576040805160e560020a62461bcd02815260206004820152600c60248201527f6d696e757465206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b6129626126f96126f48c8c63ffffffff611eae16565b9150603c82106129bc576040805160e560020a62461bcd02815260206004820152600c60248201527f7365636f6e64206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b506402540be40084026305f5e100860201620f4240870201612710840201606483020181018c81119b5099505050505050505050509250929050565b60606000806000806000606060008060008a519450846040519080825280601f01601f191660200182016040528015612a3b578160200160208202803883390190505b509350600085118015612a4f575060048506155b1515612aa5576040805160e560020a62461bcd02815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906001198801908110612ae957fe5b90602001015160f860020a900460f860020a026040516020018082600160f860020a031916600160f860020a03191681526001019150506040516020818303038152906040526040518082805190602001908083835b60208310612b5e5780518252601f199092019160209182019101612b3f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612ba057600285039450612c97565b604080517f3d00000000000000000000000000000000000000000000000000000000000000815290519081900360010190208b518c906000198801908110612be457fe5b90602001015160f860020a900460f860020a026040516020018082600160f860020a031916600160f860020a03191681526001019150506040516020818303038152906040526040518082805190602001908083835b60208310612c595780518252601f199092019160209182019101612c3a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612c97576001850394505b505060048084040260005b81811015612ff9576040805160a081018252607b815260006020820152600080516020615370833981519152918101919091526000805160206153d0833981519152606082015260008051602061535083398151915260808201528b5160018301928d918110612d0e57fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612d3457fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061537083398151915281526020016000805160206153d083398151915281526020016000805160206153508339815191528152508b82806001019350815181101515612db157fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612dd757fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b81526020016000815260200160008051602061537083398151915281526020016000805160206153d083398151915281526020016000805160206153508339815191528152508b82806001019350815181101515612e5457fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612e7a57fe5b90602001015160f860020a900460f860020a02965060a060405190810160405280607b81526020016000815260200160008051602061537083398151915281526020016000805160206153d083398151915281526020016000805160206153508339815191528152508b82806001019350815181101515612ef757fe5b90602001015160f860020a900460f860020a0260f860020a9004815181101515612f1d57fe5b0160200151845160f860020a9182900490910296506001840193600160f860020a03198b81166004026010828d16041716918691908110612f5a57fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c16041716918691908110612f9f57fe5b906020010190600160f860020a031916908160001a90535083516001840193600160f860020a0319898116604002891716918691908110612fdc57fe5b906020010190600160f860020a031916908160001a905350612ca2565b8185036002141561318b576040805160a081018252607b815260006020820152600080516020615370833981519152918101919091526000805160206153d0833981519152606082015260008051602061535083398151915260808201528b5160018301928d91811061306857fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561308e57fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061537083398151915281526020016000805160206153d083398151915281526020016000805160206153508339815191528152508b8280600101935081518110151561310b57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561313157fe5b0160200151845160f860020a9182900490910298506001840193600160f860020a03198b81166004026010828d1604171691869190811061316e57fe5b906020010190600160f860020a031916908160001a905350613401565b81850360031415613401576040805160a081018252607b815260006020820152600080516020615370833981519152918101919091526000805160206153d0833981519152606082015260008051602061535083398151915260808201528b5160018301928d9181106131fa57fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561322057fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b81526020016000815260200160008051602061537083398151915281526020016000805160206153d083398151915281526020016000805160206153508339815191528152508b8280600101935081518110151561329d57fe5b90602001015160f860020a900460f860020a0260f860020a90048151811015156132c357fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b81526020016000815260200160008051602061537083398151915281526020016000805160206153d083398151915281526020016000805160206153508339815191528152508b8280600101935081518110151561334057fe5b90602001015160f860020a900460f860020a0260f860020a900481518110151561336657fe5b0160200151845160f860020a9182900490910297506001840193600160f860020a03198b81166004026010828d160417169186919081106133a357fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c160417169186919081106133e857fe5b906020010190600160f860020a031916908160001a9053505b50508152979650505050505050565b60008281808080808080808080805b8b51811015613c8c578b517f3000000000000000000000000000000000000000000000000000000000000000908d908390811061345857fe5b90602001015160f860020a900460f860020a02600160f860020a031916101580156134ce57508b517f3900000000000000000000000000000000000000000000000000000000000000908d90839081106134ae57fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b80156134d8575083155b156135a2578415613543576134f48a600a63ffffffff6118b616565b8c51909a50613536906030908e908490811061350c57fe5b90602001015160f860020a900460f860020a0260f860020a9004038b61511090919063ffffffff16565b995060019097019661359d565b600195506135588b600a63ffffffff6118b616565b8c51909b5061359a906030908e908490811061357057fe5b90602001015160f860020a900460f860020a0260f860020a9004038c61511090919063ffffffff16565b9a505b613c84565b8b517f3000000000000000000000000000000000000000000000000000000000000000908d90839081106135d257fe5b90602001015160f860020a900460f860020a02600160f860020a0319161015801561364857508b517f3900000000000000000000000000000000000000000000000000000000000000908d908390811061362857fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b80156136515750835b156136b05761366789600a63ffffffff6118b616565b8c519099506136a9906030908e908490811061367f57fe5b90602001015160f860020a900460f860020a0260f860020a9004038a61511090919063ffffffff16565b9850613c84565b8b517f2e00000000000000000000000000000000000000000000000000000000000000908d90839081106136e057fe5b90602001015160f860020a900460f860020a02600160f860020a031916141561380f5785151561375a576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b84156137b0576040805160e560020a62461bcd02815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b8315613806576040805160e560020a62461bcd02815260206004820152601660248201527f646563696d616c206166746572206578706f6e656e7400000000000000000000604482015290519081900360640190fd5b60019450613c84565b8b517f2d00000000000000000000000000000000000000000000000000000000000000908d908390811061383f57fe5b90602001015160f860020a900460f860020a02600160f860020a03191614156139715782156138b8576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202d000000000000000000000000000000000000000000604482015290519081900360640190fd5b811561390e576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613968576040805160e560020a62461bcd02815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019250613c84565b8b517f2b00000000000000000000000000000000000000000000000000000000000000908d90839081106139a157fe5b90602001015160f860020a900460f860020a02600160f860020a0319161415613ad3578115613a1a576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202b000000000000000000000000000000000000000000604482015290519081900360640190fd5b8215613a70576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613aca576040805160e560020a62461bcd02815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b60019150613c84565b8b517f4500000000000000000000000000000000000000000000000000000000000000908d9083908110613b0357fe5b90602001015160f860020a900460f860020a02600160f860020a0319161480613b7657508b517f6500000000000000000000000000000000000000000000000000000000000000908d9083908110613b5757fe5b90602001015160f860020a900460f860020a02600160f860020a031916145b15613c3457851515613bd2576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b8315613c28576040805160e560020a62461bcd02815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b60019350809650613c84565b6040805160e560020a62461bcd02815260206004820152600d60248201527f696e76616c696420646967697400000000000000000000000000000000000000604482015290519081900360640190fd5b60010161341f565b8280613c955750815b15613cae57600287018111613ca957600080fd5b613cc3565b8315613cc357600187018111613cc357600080fd5b8215613d4f578d8910613d4557604e8e8a0310613d2a576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b8d8903600a0a8b811515613d3a57fe5b049a508a9c50613fc9565b888e039d50613d62565b613d5f8e8a63ffffffff61511016565b9d505b878e10613e8857604e8810613de7576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b613dfb8b600a8a900a63ffffffff6118b616565b9a50613e0d8b8b63ffffffff61511016565b9a50604e888f0310613e69576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b613e81888f03600a0a8c6118b690919063ffffffff16565b9a50613fc5565b968d900396604e8810613f0b576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b87600a0a8a811515613f1957fe5b049950604e8e10613f9a576040805160e560020a62461bcd02815260206004820152602260248201527f6d6f7265207468616e20373720646563696d616c20646967697473207061727360448201527f6564000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b613fb08e600a0a8c6118b690919063ffffffff16565b9a50613fc28b8b63ffffffff61511016565b9a505b8a9c505b50505050505050505050505092915050565b60008054600160a060020a03161580614006575060005461400490600160a060020a0316612491565b155b15614017576140156000612495565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561406957600080fd5b505af115801561407d573d6000803e3d6000fd5b505050506040513d602081101561409357600080fd5b5051600154600160a060020a03908116911614614148576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156140fc57600080fd5b505af1158015614110573d6000803e3d6000fd5b505050506040513d602081101561412657600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b6001546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b838110156141c15781810151838201526020016141a9565b50505050905090810190601f1680156141ee5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611a7357600080fd5b606080600083600001518560000151016040519080825280601f01601f19166020018201604052801561424a578160200160208202803883390190505b50915060208201905061426681866020015187600001516146f4565b84516020850151855161427c92840191906146f4565b509392505050565b600080548190600160a060020a031615806142b157506000546142af90600160a060020a0316612491565b155b156142c2576142c06000612495565b505b6000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561431457600080fd5b505af1158015614328573d6000803e3d6000fd5b505050506040513d602081101561433e57600080fd5b5051600154600160a060020a039081169116146143f3576000809054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156143a757600080fd5b505af11580156143bb573d6000803e3d6000fd5b505050506040513d60208110156143d157600080fd5b505160018054600160a060020a031916600160a060020a039092169190911790555b600154604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810186905260048101918252875160448201528751600160a060020a0390931692632ef3accc9289928892829160640190602086019080838360005b8381101561447357818101518382015260200161445b565b50505050905090810190601f1680156144a05780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156144c057600080fd5b505af11580156144d4573d6000803e3d6000fd5b505050506040513d60208110156144ea57600080fd5b50519050670de0b6b3a76400003a84020181111561450b576000915061427c565b6001546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b8381101561459e578181015183820152602001614586565b50505050905090810190601f1680156145cb5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156145fe5781810151838201526020016145e6565b50505050905090810190601f16801561462b5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b15801561464d57600080fd5b505af1158015614661573d6000803e3d6000fd5b50505050506040513d602081101561467857600080fd5b505195945050505050565b61468b6152b0565b60006146a98560000151866020015186600001518760200151615122565b602080870180519186019190915280518203855286519051919250018114156146d557600085526146eb565b8351835186519101900385528351810160208601525b50909392505050565b60005b60208210614719578251845260209384019390920191601f19909101906146f7565b50905182516020929092036101000a6000190180199091169116179052565b6007546008546040805160e060020a630178b8bf028152600481019290925251606092600160a060020a031691630178b8bf9160248083019260209291908290030181600087803b15801561478c57600080fd5b505af11580156147a0573d6000803e3d6000fd5b505050506040513d60208110156147b657600080fd5b50516008546040805160e160020a631d9dabef028152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561480957600080fd5b505af115801561481d573d6000803e3d6000fd5b505050506040513d602081101561483357600080fd5b5051604080517fe81239ac0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163e81239ac9160048082019260009290919082900301818387803b15801561489157600080fd5b505af11580156148a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156148ce57600080fd5b8101908080516401000000008111156148e657600080fd5b820160208101848111156148f957600080fd5b815185602082028301116401000000008211171561491657600080fd5b509094505050505090565b600080614941731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612491565b11156149b25760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e657400000000000000000000000000000000000000000060208201526149aa906151e2565b506001610e95565b60006149d173c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612491565b1115614a3a5760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526149aa906151e2565b6000614a5973b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612491565b1115614ac25760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e000000000000000000000000000000000000000000000060208201526149aa906151e2565b6000614ae173146500cfd35b22e4a392fe0adc06de1a1368ed48612491565b1115614b4a5760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b65627900000000000000000000000000000000000000000060208201526149aa906151e2565b6000614b69736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612491565b1115614b9d575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001610e95565b6000614bbc7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612491565b1115614bf0575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001610e95565b6000614c0f7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612491565b1115614c43575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001610e95565b50600090565b600080600080600085516041141515614c6857600094508493506105df565b50505060208301516040840151606085015160001a601b60ff82161015614c8d57601b015b8060ff16601b14158015614ca557508060ff16601c14155b15614cb657600094508493506105df565b614cc2878285856151f5565b945094505050509250929050565b6000611724826000613410565b600080826040516020018082805190602001908083835b60208310614d135780518252601f199092019160209182019101614cf4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310614d765780518252601f199092019160209182019101614d57565b5181516000196020949094036101000a93909301928316921916919091179052604080519390910183900383207f4a616e00000000000000000000000000000000000000000000000000000000008452905192839003600301909220919450508314159150614dea90505760019150611ea8565b604080517f466562000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614e2c5760029150611ea8565b604080517f4d6172000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614e6e5760039150611ea8565b604080517f417072000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614eb05760049150611ea8565b604080517f4d6179000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614ef25760059150611ea8565b604080517f4a756e000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614f345760069150611ea8565b604080517f4a756c000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614f765760079150611ea8565b604080517f417567000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614fb85760089150611ea8565b604080517f536570000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614ffa5760099150611ea8565b604080517f4f637400000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561503c57600a9150611ea8565b604080517f4e6f7600000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561507e57600b9150611ea8565b604080517f4465630000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156150c057600c9150611ea8565b6040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b6000828201838110156118e457600080fd5b600083818080808080808c8b116151cc5760208b116151955760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461518d5783881061517a578c8c0198506151d2565b8780600101985050858851169250615162565b8798506151d2565b8a8a209150600096505b8a8d0387116151cc5750898720818114156151bc578798506151d2565b600197880197969096019561519f565b8c8c0198505b5050505050505050949350505050565b80516103479060029060208401906152c7565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106152735782800160ff198235161785556152a0565b828001600101855582156152a0579182015b828111156152a0578235825591602001919060010190615285565b506152ac929150615335565b5090565b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061530857805160ff19168380011785556152a0565b828001600101855582156152a0579182015b828111156152a057825182559160200191906001019061531a565b610e9591905b808211156152ac576000815560010161533b5600001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000073656e646572206973206e6f74206120636f6e74726f6c6c65720000000000004eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e00000102030405060708090a0b0c0d0e0f10111213141516171819000000003fa165627a7a723058202aa1b151d167b66e96fb8a51dbd19f6953bebb793e265e0f0f4e3e2daa2b9de40029`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver common.Address, _ens common.Address, _controllerName [32]byte, _tokenWhitelistName [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver, _ens, _controllerName, _tokenWhitelistName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) APIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "APIPublicKey")
	return *ret0, err
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// APIPublicKey is a free data retrieval call binding the contract method 0xcc204119.
//
// Solidity: function APIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) APIPublicKey() ([]byte, error) {
	return _Oracle.Contract.APIPublicKey(&_Oracle.CallOpts)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(address _token, uint256 _amount) constant returns(bool, uint256)
func (_Oracle *OracleCaller) Convert(opts *bind.CallOpts, _token common.Address, _amount *big.Int) (bool, *big.Int, error) {
	var (
		ret0 = new(bool)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Oracle.contract.Call(opts, out, "convert", _token, _amount)
	return *ret0, *ret1, err
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(address _token, uint256 _amount) constant returns(bool, uint256)
func (_Oracle *OracleSession) Convert(_token common.Address, _amount *big.Int) (bool, *big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// Convert is a free data retrieval call binding the contract method 0x67c6e39c.
//
// Solidity: function convert(address _token, uint256 _amount) constant returns(bool, uint256)
func (_Oracle *OracleCallerSession) Convert(_token common.Address, _amount *big.Int) (bool, *big.Int, error) {
	return _Oracle.Contract.Convert(&_Oracle.CallOpts, _token, _amount)
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleCaller) ParseRate(opts *bind.CallOpts, _json string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "parseRate", _json)
	return *ret0, err
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleSession) ParseRate(_json string) (string, error) {
	return _Oracle.Contract.ParseRate(&_Oracle.CallOpts, _json)
}

// ParseRate is a free data retrieval call binding the contract method 0xa780b2f3.
//
// Solidity: function parseRate(string _json) constant returns(string)
func (_Oracle *OracleCallerSession) ParseRate(_json string) (string, error) {
	return _Oracle.Contract.ParseRate(&_Oracle.CallOpts, _json)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateAPIPublicKey", _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateAPIPublicKey is a paid mutator transaction binding the contract method 0x9f6f99ee.
//
// Solidity: function updateAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts, _gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates", _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactor) UpdateTokenRatesList(opts *bind.TransactOpts, _gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRatesList", _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Withdraw(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "withdraw", _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _to, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Withdraw(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Withdraw(&_Oracle.TransactOpts, _to, _amount)
}

// OracleClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Oracle contract.
type OracleClaimedIterator struct {
	Event *OracleClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleClaimed represents a Claimed event raised by the Oracle contract.
type OracleClaimed struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) FilterClaimed(opts *bind.FilterOpts) (*OracleClaimedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &OracleClaimedIterator{contract: _Oracle.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *OracleClaimed) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleClaimed)
				if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleConvertedIterator is returned from FilterConverted and is used to iterate over the raw logs and unpacked data for Converted events raised by the Oracle contract.
type OracleConvertedIterator struct {
	Event *OracleConverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleConvertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleConverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleConverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleConvertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleConvertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleConverted represents a Converted event raised by the Oracle contract.
type OracleConverted struct {
	Sender common.Address
	Token  common.Address
	Amount *big.Int
	Ether  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterConverted is a free log retrieval operation binding the contract event 0x3eb9c827477658b168595969c2b83c99d882f7741df2545eb56754b796a968be.
//
// Solidity: event Converted(address _sender, address _token, uint256 _amount, uint256 _ether)
func (_Oracle *OracleFilterer) FilterConverted(opts *bind.FilterOpts) (*OracleConvertedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return &OracleConvertedIterator{contract: _Oracle.contract, event: "Converted", logs: logs, sub: sub}, nil
}

// WatchConverted is a free log subscription operation binding the contract event 0x3eb9c827477658b168595969c2b83c99d882f7741df2545eb56754b796a968be.
//
// Solidity: event Converted(address _sender, address _token, uint256 _amount, uint256 _ether)
func (_Oracle *OracleFilterer) WatchConverted(opts *bind.WatchOpts, sink chan<- *OracleConverted) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleConverted)
				if err := _Oracle.contract.UnpackLog(event, "Converted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0xd28a52bc81f387be057d69ee89db644f94b7064c4acec0d5bc33e201a2031c05.
//
// Solidity: event RequestedUpdate(string _symbol)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	Sender   common.Address
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
